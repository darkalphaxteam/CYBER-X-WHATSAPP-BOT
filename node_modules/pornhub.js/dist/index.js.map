{"version":3,"sources":["../src/index.ts","../src/apis/route.ts","../src/types/SearchOrdering.ts","../src/types/SearchPeriod.ts","../src/types/Country.ts","../src/utils/constant.ts","../src/utils/string.ts","../src/apis/getMainPage.ts","../src/utils/cheerio.ts","../src/apis/login.ts","../src/apis/logout.ts","../src/apis/getToken.ts","../src/apis/autoComplete.ts","../src/core/dumper.ts","../src/core/request.ts","../src/utils/error.ts","../src/core/eventEmitter.ts","../src/core/engine.ts","../src/apis/webmaster/categories.ts","../src/apis/webmaster/deleted.ts","../src/utils/url.ts","../src/apis/webmaster/embed.ts","../src/apis/webmaster/utils/videoTransform.ts","../src/apis/webmaster/search.ts","../src/apis/webmaster/stars.ts","../src/apis/webmaster/stars_detailed.ts","../src/apis/webmaster/tags.ts","../src/apis/webmaster/video_by_id.ts","../src/apis/webmaster/video_is_active.ts","../src/core/webmaster.ts","../src/scrapers/list/pornstars.ts","../src/scrapers/search/base.ts","../src/scrapers/search/video.ts","../src/utils/utils.ts","../src/scrapers/list/videos.ts","../src/scrapers/pages/album.ts","../src/utils/number.ts","../src/scrapers/pages/model.ts","../src/scrapers/pages/photo.ts","../src/scrapers/pages/pornstar.ts","../src/utils/time.ts","../src/scrapers/pages/video.ts","../src/scrapers/pages/random.ts","../src/scrapers/pages/recommended.ts","../src/scrapers/search/album.ts","../src/scrapers/search/gif.ts","../src/scrapers/search/model.ts","../src/scrapers/search/pornstar.ts"],"sourcesContent":["import { Route, getMainPage, login, logout } from './apis'\r\nimport { getAutoComplete } from './apis/autoComplete'\r\nimport { getToken } from './apis/getToken'\r\nimport { Engine } from './core/engine'\r\nimport { WebMaster } from './core/webmaster'\r\nimport { pornstarList } from './scrapers/list/pornstars'\r\nimport { videoList } from './scrapers/list/videos'\r\nimport { albumPage } from './scrapers/pages/album'\r\nimport { modelPage, modelUploadedVideos } from './scrapers/pages/model'\r\nimport { photoPage } from './scrapers/pages/photo'\r\nimport { pornstarPage } from './scrapers/pages/pornstar'\r\nimport { randomPage } from './scrapers/pages/random'\r\nimport { recommended } from './scrapers/pages/recommended'\r\nimport { videoPage } from './scrapers/pages/video'\r\nimport { albumSearch } from './scrapers/search/album'\r\nimport { gifSearch } from './scrapers/search/gif'\r\nimport { modelSearch } from './scrapers/search/model'\r\nimport { pornstarSearch } from './scrapers/search/pornstar'\r\nimport { videoSearch } from './scrapers/search/video'\r\nimport type { AlbumSearchOptions, AutoCompleteOptions, GifSearchOptions, PornstarSearchOptions, RecommendedOptions, VideoSearchOptions } from './types'\r\nimport type { ModelVideoListOptions, PornstarListOptions, VideoListOptions } from './types/ListOptions'\r\nimport type { RequestInit } from 'node-fetch'\r\n\r\nexport * from './types'\r\nexport * from './utils/error'\r\nexport type { AlbumPage } from './scrapers/pages/album'\r\nexport type { PhotoPage } from './scrapers/pages/photo'\r\nexport type { VideoPage } from './scrapers/pages/video'\r\nexport type { PornstarPage } from './scrapers/pages/pornstar'\r\nexport type { ModelPage } from './scrapers/pages/model'\r\n\r\nexport type { AlbumSearchResult } from './scrapers/search/album'\r\nexport type { PornstarSearchResult } from './scrapers/search/pornstar'\r\nexport type { GifSearchResult } from './scrapers/search/gif'\r\nexport type { VideoSearchResult, VideoListResult } from './scrapers/search/video'\r\n\r\nexport type { PornstarListResult } from './scrapers/list/pornstars'\r\n\r\nexport type { WebmasterCategory } from './apis/webmaster/categories'\r\nexport type { WebmasterDeleted } from './apis/webmaster/deleted'\r\nexport type { WebmasterEmbed } from './apis/webmaster/embed'\r\nexport type { WebmasterSearch } from './apis/webmaster/search'\r\nexport type { WebmasterStarsDetailed } from './apis/webmaster/stars_detailed'\r\nexport type { WebmasterStars, WebmasterStar } from './apis/webmaster/stars'\r\nexport type { WebmasterTags } from './apis/webmaster/tags'\r\nexport type { WebmasterVideoById } from './apis/webmaster/video_by_id'\r\nexport type { WebmasterVideoIsActive } from './apis/webmaster/video_is_active'\r\n\r\nexport interface PornHubConfig {\r\n    /**\r\n     * Dump response to file for debugging.\r\n     *\r\n     * Pass a path string to specify the folder, otherwise it will write to `./_dump`.\r\n     *\r\n     * Default to `false`.\r\n     */\r\n    dumpPage?: boolean | string\r\n}\r\n\r\nexport class PornHub {\r\n    route = Route\r\n    engine = new Engine()\r\n    webMaster = new WebMaster(this.engine)\r\n\r\n    constructor(config: PornHubConfig = {}) {\r\n        if (config.dumpPage) {\r\n            const dumpPagePath = typeof config.dumpPage === 'string' ? config.dumpPage : ''\r\n            this.engine.dumper.enable(dumpPagePath)\r\n        }\r\n    }\r\n\r\n    setAgent(agent: RequestInit['agent']) {\r\n        this.engine.request.setAgent(agent)\r\n    }\r\n\r\n    setHeader(key: string, value: string) {\r\n        this.engine.request.setHeader(key, value)\r\n    }\r\n\r\n    getCookies() {\r\n        return this.engine.request.getCookies()\r\n    }\r\n\r\n    getCookie(key: string) {\r\n        return this.engine.request.getCookie(key)\r\n    }\r\n\r\n    setCookie(key: string, value: string) {\r\n        this.engine.request.setCookie(key, value)\r\n    }\r\n\r\n    deleteCookie(key: string) {\r\n        this.engine.request.deleteCookie(key)\r\n    }\r\n\r\n    /**\r\n     * See: https://github.com/pionxzh/Pornhub.js/issues/27\r\n     * @deprecated This method is no longer needed.\r\n     */\r\n    async warmup() {\r\n        console.warn('`warmup` has been deprecated. You can safely remove this method call. It has been handled internally.')\r\n        // no-op\r\n    }\r\n\r\n    /**\r\n     * Login with account and password.\r\n     */\r\n    login(account: string, password: string) {\r\n        return login(this.engine, account, password)\r\n    }\r\n\r\n    /**\r\n     * Logout from Pornhub.com.\r\n     */\r\n    logout() {\r\n        return logout(this.engine)\r\n    }\r\n\r\n    /**\r\n     * Get token from Pornhub.com.\r\n     * Most of pornhub's api need this token.\r\n     * You can cache this token to avoid frequent requests (I'm not sure about the expiration time!).\r\n     *\r\n     * For now, this token is only used for `autoComplete` and `searchModel`.\r\n     * This library will automatically get the token if you don't provide one.\r\n     */\r\n    getToken() {\r\n        return getToken(this.engine)\r\n    }\r\n\r\n    /**\r\n     * Get video information by url/ID\r\n     * @param urlOrId Video ID or page url\r\n     */\r\n    async video(urlOrId: string) {\r\n        if (!this.engine.warmedUp) {\r\n            // make a call to the main page to get the cookies.\r\n            // PornHub will redirect you to a corn video if you don't have a proper cookie set.\r\n            // See issue: [#27 Video been redirected to a corn video](https://github.com/pionxzh/Pornhub.js/issues/27)\\\r\n            await getMainPage(this.engine)\r\n            this.engine.warmedUp = true\r\n        }\r\n        return videoPage(this.engine, urlOrId)\r\n    }\r\n\r\n    /**\r\n     * Get album information by url/ID\r\n     * @param urlOrId Album ID or page url\r\n     */\r\n    album(urlOrId: string) {\r\n        return albumPage(this.engine, urlOrId)\r\n    }\r\n\r\n    /**\r\n     * Get photo information by url/ID\r\n     * @param urlOrId Photo ID or page url\r\n     */\r\n    photo(urlOrId: string) {\r\n        return photoPage(this.engine, urlOrId)\r\n    }\r\n\r\n    /**\r\n     * Get pornstar information by url/ID\r\n     * @param urlOrName Pornstar name or page url\r\n     */\r\n    pornstar(urlOrName: string) {\r\n        return pornstarPage(this.engine, urlOrName)\r\n    }\r\n\r\n    /**\r\n     * Get model information by url/ID\r\n     * @param urlOrName Model name or page url\r\n     */\r\n    model(urlOrName: string) {\r\n        return modelPage(this.engine, urlOrName)\r\n    }\r\n\r\n    /**\r\n     * Get list of model's uploaded videos\r\n     * @param urlOrName Model name or page url\r\n     * @param options Options including page number\r\n     */\r\n    modelVideos(urlOrName: string, options: ModelVideoListOptions = {}) {\r\n        return modelUploadedVideos(this.engine, urlOrName, options)\r\n    }\r\n\r\n    /**\r\n     * Get a random video.\r\n     * @returns The same object as `video()`\r\n     */\r\n    randomVideo() {\r\n        return randomPage(this.engine)\r\n    }\r\n\r\n    /**\r\n     * Get autocomplete result by keyword.\r\n     */\r\n    autoComplete(keyword: string, options: AutoCompleteOptions = {}) {\r\n        return getAutoComplete(this.engine, keyword, options)\r\n    }\r\n\r\n    /**\r\n     * Search album by keyword.\r\n     */\r\n    searchAlbum(keyword: string, options: AlbumSearchOptions = {}) {\r\n        return albumSearch(this.engine, keyword, options)\r\n    }\r\n\r\n    /**\r\n     * Search gif by keyword.\r\n     */\r\n    searchGif(keyword: string, options: GifSearchOptions = {}) {\r\n        return gifSearch(this.engine, keyword, options)\r\n    }\r\n\r\n    /**\r\n     * Search pornstar by keyword.\r\n     */\r\n    searchPornstar(keyword: string, options: PornstarSearchOptions = {}) {\r\n        return pornstarSearch(this.engine, keyword, options)\r\n    }\r\n\r\n    /**\r\n     * Search model by keyword.\r\n     */\r\n    searchModel(keyword: string, options: AutoCompleteOptions = {}) {\r\n        return modelSearch(this.engine, keyword, options)\r\n    }\r\n\r\n    /**\r\n     * Search video by keyword.\r\n     */\r\n    searchVideo(keyword: string, options: VideoSearchOptions = {}) {\r\n        return videoSearch(this.engine, keyword, options)\r\n    }\r\n\r\n    /**\r\n     * Get video list.\r\n     */\r\n    videoList(options: VideoListOptions = {}) {\r\n        return videoList(this.engine, options)\r\n    }\r\n\r\n    /**\r\n     * Get pornstar list.\r\n     */\r\n    pornstarList(options: PornstarListOptions = {}) {\r\n        return pornstarList(this.engine, options)\r\n    }\r\n\r\n    /**\r\n     * Get recommended videos.\r\n     */\r\n    recommendedVideos(options: RecommendedOptions = {}) {\r\n        return recommended(this.engine, options)\r\n    }\r\n}\r\n","import urlcat from 'urlcat'\r\nimport { AlbumOrderingMapping, GifOrderingMapping, PornstarListOrderingMapping, PornstarOrderingMapping, PornstarPopularPeriodMapping, PornstarViewedPeriodMapping, RecommendedOrderingMapping, VideoListOrderingMapping, VideoOrderingMapping, VideoSearchPeriodMapping } from '../types'\r\nimport { CountryMapping } from '../types/Country'\r\nimport { BASE_URL } from '../utils/constant'\r\nimport { dashify, searchify } from '../utils/string'\r\nimport type { AlbumSearchOptions, AutoCompleteOptions, GifSearchOptions, PornstarSearchOptions, RecommendedOptions, VideoSearchOptions, WebmasterSearchOptions } from '../types'\r\nimport type { PornstarListOptions, VideoListOptions } from '../types/ListOptions'\r\n\r\nexport const Route = {\r\n    /**\r\n     * @url https://www.pornhub.com/\r\n     */\r\n    mainPage() {\r\n        return `${BASE_URL}/`\r\n    },\r\n    /**\r\n     * @url https://www.pornhub.com/front/authenticate\r\n     */\r\n    authenticate() {\r\n        return urlcat(BASE_URL, '/front/authenticate')\r\n    },\r\n    /**\r\n     * @url https://www.pornhub.com/user/logout\r\n     */\r\n    logout(token: string) {\r\n        return urlcat(BASE_URL, '/user/logout', { token })\r\n    },\r\n    /**\r\n     * @url https://www.pornhub.com/video/search_autocomplete?q=random&orientation=straight&pornstars=1&alt=0&token=xxx\r\n     */\r\n    autocomplete(keyword: string, {\r\n        token,\r\n        sexualOrientation = 'straight',\r\n    }: AutoCompleteOptions) {\r\n        return urlcat(BASE_URL, '/video/search_autocomplete', {\r\n            q: keyword,\r\n            orientation: sexualOrientation,\r\n            pornstars: true,\r\n            token,\r\n            alt: 0,\r\n        })\r\n    },\r\n    /**\r\n     * @url https://www.pornhub.com/album/7529441\r\n     */\r\n    albumPage(id: string) {\r\n        return urlcat(BASE_URL, '/album/:id', { id })\r\n    },\r\n    /**\r\n     * @url https://www.pornhub.com/photo/833578021\r\n     */\r\n    photoPage(id: string) {\r\n        return urlcat(BASE_URL, '/photo/:id', { id })\r\n    },\r\n    videoPage(id: string) {\r\n        return urlcat(BASE_URL, '/view_video.php', { viewkey: id })\r\n    },\r\n    /**\r\n     * @url https://www.pornhub.com/pornstar/eva-elfie\r\n     */\r\n    pornstarPage(name: string) {\r\n        return urlcat(BASE_URL, '/pornstar/:name', { name })\r\n    },\r\n    /**\r\n     * @url https://www.pornhub.com/model/luna-okko\r\n     */\r\n    modelPage(name: string) {\r\n        return urlcat(BASE_URL, '/model/:name', { name })\r\n    },\r\n    /**\r\n     * @url https://www.pornhub.com/model/luna-okko/videos\r\n     */\r\n    modelVideosPage(name: string, page: number) {\r\n        return urlcat(BASE_URL, '/model/:name/videos', { name, page })\r\n    },\r\n    /**\r\n     * @url https://www.pornhub.com/channels/brazzers\r\n     */\r\n    channelPage(name: string) {\r\n        return urlcat(BASE_URL, '/channels/:name', { name })\r\n    },\r\n    /**\r\n     * @url https://www.pornhub.com/random\r\n     */\r\n    randomPage() {\r\n        return urlcat(BASE_URL, '/random')\r\n    },\r\n    /**\r\n     * @url https://www.pornhub.com/recommended\r\n     */\r\n    recommendedPage({\r\n        order = 'Most Relevant',\r\n        page = 1,\r\n        sexualOrientation = 'straight',\r\n    }: RecommendedOptions) {\r\n        const orientation = sexualOrientation === 'straight' ? undefined : sexualOrientation\r\n        const pathTemplate = orientation\r\n            ? '/:orientation/recommended'\r\n            : '/recommended'\r\n        return urlcat(BASE_URL, pathTemplate, {\r\n            orientation,\r\n            ...(order !== 'Most Relevant' && { o: RecommendedOrderingMapping[order] }),\r\n            ...(page !== 1 && { page }),\r\n        })\r\n    },\r\n\r\n    /**\r\n     * @url https://www.pornhub.com/albums/female-straight-uncategorized?search=random\r\n     */\r\n    albumSearch(keyword: string, {\r\n        page = 1,\r\n        segments = 'female-straight-uncategorized',\r\n        order = 'Most Relevant',\r\n        verified = false,\r\n    }: AlbumSearchOptions) {\r\n        const o = AlbumOrderingMapping[order]\r\n        return urlcat(BASE_URL, '/albums/:segment', {\r\n            segment: dashify(segments),\r\n            search: searchify(keyword),\r\n            ...(page !== 1 && { page }),\r\n            ...(o && { o }),\r\n            ...(verified && { verified: '1' }),\r\n        })\r\n    },\r\n    /**\r\n     * @url https://www.pornhub.com/gifs/search?search=xxx\r\n     */\r\n    gifSearch(keyword: string, {\r\n        page = 1,\r\n        order = 'Most Relevant',\r\n        sexualOrientation = 'straight',\r\n    }: GifSearchOptions) {\r\n        const o = GifOrderingMapping[order]\r\n        const orientation = sexualOrientation === 'straight' ? undefined : sexualOrientation\r\n        const pathTemplate = orientation\r\n            ? '/:orientation/gifs/search'\r\n            : '/gifs/search'\r\n        return urlcat(BASE_URL, pathTemplate, {\r\n            orientation,\r\n            search: searchify(keyword),\r\n            ...(page !== 1 && { page }),\r\n            ...(o && { o }),\r\n        })\r\n    },\r\n    /**\r\n     * @url https://www.pornhub.com/pornstars/search?search=hot\r\n     */\r\n    pornstarSearch(keyword: string, {\r\n        page = 1,\r\n        order = 'Most Relevant',\r\n        sexualOrientation = 'straight',\r\n    }: PornstarSearchOptions) {\r\n        const o = PornstarOrderingMapping[order]\r\n        const orientation = sexualOrientation === 'straight' ? undefined : sexualOrientation\r\n        const pathTemplate = orientation\r\n            ? '/:orientation/pornstars/search'\r\n            : '/pornstars/search'\r\n        return urlcat(BASE_URL, pathTemplate, {\r\n            orientation,\r\n            search: searchify(keyword),\r\n            ...(page !== 1 && { page }),\r\n            ...(o && { o }),\r\n        })\r\n    },\r\n    /**\r\n     * @url https://www.pornhub.com/video/search?search=random\r\n     */\r\n    videoSearch(keyword: string, param: VideoSearchOptions) {\r\n        const {\r\n            page = 1,\r\n            order = 'Most Relevant',\r\n            hd = false,\r\n            production = 'all',\r\n            durationMin,\r\n            durationMax,\r\n            filterCategory,\r\n            sexualOrientation = 'straight',\r\n        } = param\r\n        const o = VideoOrderingMapping[order]\r\n        const orientation = sexualOrientation === 'straight' ? undefined : sexualOrientation\r\n        const pathTemplate = orientation\r\n            ? '/:orientation/video/search'\r\n            : '/video/search'\r\n        return urlcat(BASE_URL, pathTemplate, {\r\n            orientation,\r\n            search: searchify(keyword),\r\n            ...(page !== 1 && { page }),\r\n            ...(o && { o }),\r\n            ...(hd && { hd: '1' }),\r\n            ...(production !== 'all' && { p: production }),\r\n            ...(durationMin && { min_duration: durationMin }),\r\n            ...(durationMax && { max_duration: durationMax }),\r\n            ...(filterCategory && { filter_category: filterCategory }),\r\n            ...((param.order === 'Most Viewed' || param.order === 'Top Rated')\r\n                && param.period && param.period !== 'alltime' && { t: VideoSearchPeriodMapping[param.period] }),\r\n        })\r\n    },\r\n    /**\r\n     * @url https://www.pornhub.com/video\r\n     */\r\n    videoList(param: VideoListOptions) {\r\n        const {\r\n            page = 1,\r\n            order = 'Featured Recently',\r\n            hd = false,\r\n            production = 'all',\r\n            durationMin,\r\n            durationMax,\r\n            filterCategory,\r\n            sexualOrientation = 'straight',\r\n        } = param\r\n        const pathTemplate = sexualOrientation === 'transgender'\r\n            ? 'transgender'\r\n            : sexualOrientation === 'gay'\r\n                ? '/gayporn'\r\n                : '/video'\r\n        const o = VideoListOrderingMapping[order]\r\n        return urlcat(BASE_URL, pathTemplate, {\r\n            ...(filterCategory && { c: filterCategory }),\r\n            ...(production !== 'all' && { p: production }),\r\n            ...(o && { o }),\r\n            ...((param.order === 'Most Viewed' || param.order === 'Top Rated')\r\n                && param.period && param.period !== 'alltime' && { t: VideoSearchPeriodMapping[param.period] }),\r\n            ...(param.order === 'Hottest' && param.country && param.country !== 'World' && { cc: CountryMapping[param.country] }),\r\n            ...(durationMin && { min_duration: durationMin }),\r\n            ...(durationMax && { max_duration: durationMax }),\r\n            ...(hd && { hd: '1' }),\r\n            ...(page !== 1 && { page }),\r\n        })\r\n    },\r\n    /**\r\n     * @url https://www.pornhub.com/pornstars\r\n     */\r\n    pornstarList(param: PornstarListOptions) {\r\n        const {\r\n            gay = false,\r\n            performerType,\r\n            gender,\r\n            ethnicity,\r\n            tattoos,\r\n            cup,\r\n            piercings,\r\n            hair,\r\n            breastType,\r\n            ageFrom = 18,\r\n            ageTo = 99,\r\n            order = 'Most Popular',\r\n            page = 1,\r\n        } = param\r\n        const getYesNo = (v: boolean) => v ? 'yes' : 'no'\r\n        const o = PornstarListOrderingMapping[order]\r\n        const age = `${ageFrom}-${ageTo}`\r\n        return urlcat(BASE_URL, gay ? '/gay/pornstars' : '/pornstars', {\r\n            ...(performerType && { performerType }),\r\n            ...(gender && { gender }),\r\n            ...(ethnicity && { ethnicity }),\r\n            ...(typeof piercings === 'boolean' && { piercings: getYesNo(piercings) }),\r\n            ...(age !== '18-99' && { age }),\r\n            ...(cup && { cup: cup.toLowerCase() }),\r\n            ...(breastType && { breastType }),\r\n            ...(hair && { hair }),\r\n            ...(typeof tattoos === 'boolean' && { tattoos: getYesNo(tattoos) }),\r\n            ...(o && { o }),\r\n            ...(param.order === 'Alphabetical' && { letter: (param.letter ?? 'a').toLowerCase() }),\r\n            ...(param.order === 'Most Popular' && param.timeRange && param.timeRange !== 'monthly' && {\r\n                timeRange: PornstarPopularPeriodMapping[param.timeRange],\r\n            }),\r\n            ...(param.order === 'Most Viewed' && param.timeRange && param.timeRange !== 'alltime' && {\r\n                timeRange: PornstarViewedPeriodMapping[param.timeRange],\r\n            }),\r\n            ...(page !== 1 && { page }),\r\n        })\r\n    },\r\n}\r\n\r\nconst WebmasterBaseUrl = urlcat(BASE_URL, '/webmasters')\r\n\r\nexport const WebmasterRoute = {\r\n    isVideoActive(id: string) {\r\n        return urlcat(WebmasterBaseUrl, '/is_video_active', { id })\r\n    },\r\n    categories() {\r\n        return urlcat(WebmasterBaseUrl, '/categories')\r\n    },\r\n    deletedVideos(page: number) {\r\n        return urlcat(WebmasterBaseUrl, '/deleted_videos', { page })\r\n    },\r\n    video_embed_code(id: string) {\r\n        return urlcat(WebmasterBaseUrl, '/video_embed_code', { id })\r\n    },\r\n    stars_detailed() {\r\n        return urlcat(WebmasterBaseUrl, '/stars_detailed')\r\n    },\r\n    stars() {\r\n        return urlcat(WebmasterBaseUrl, '/stars')\r\n    },\r\n    tags(letter: string) {\r\n        return urlcat(WebmasterBaseUrl, '/tags', { list: letter })\r\n    },\r\n    video_by_id(id: string, thumbsize: string) {\r\n        return urlcat(WebmasterBaseUrl, '/video_by_id', { id, thumbsize })\r\n    },\r\n    search(keyword: string, options: WebmasterSearchOptions = {}) {\r\n        const query = {\r\n            'search': keyword.split(' ').join('+'),\r\n            'page': options.page,\r\n            'period': options.period,\r\n            'ordering': options.ordering,\r\n            'thumbsize': options.thumbsize,\r\n            'tags[]': options.tags?.join(','),\r\n            'stars[]': options.stars?.join(','),\r\n            'category': options.category?.join(','),\r\n        }\r\n        return urlcat(WebmasterBaseUrl, '/search', query)\r\n    },\r\n}\r\n","export type WebmasterSearchOrdering = 'newest' | 'mostviewed' | 'rating'\r\n\r\nexport type VideoSearchOrdering = 'Most Relevant' | 'Most Recent' | 'Most Viewed' | 'Top Rated' | 'Longest'\r\n\r\nexport type GifSearchOrdering = 'Most Relevant' | 'Most Recent' | 'Most Viewed' | 'Top Rated'\r\n\r\nexport type AlbumSearchOrdering = 'Most Relevant' | 'Most Recent' | 'Most Viewed' | 'Top Rated'\r\n\r\nexport type PornstarSearchOrdering = 'Most Relevant' | 'Most Popular' | 'Most Viewed' | 'No. of Video'\r\n\r\nexport type VideoListOrdering = 'Featured Recently' | 'Most Viewed' | 'Top Rated' | 'Hottest' | 'Longest' | 'Newest'\r\n\r\nexport type PornstarListOrdering = 'Most Popular' | 'Most Viewed' | 'Top Trending' | 'Most Subscribed' | 'Alphabetical' | 'No. of Videos' | 'Random'\r\n\r\nexport type RecommendedOrdering = 'Most Relevant' | 'Most Recent'\r\n\r\nexport const VideoOrderingMapping: Record<VideoSearchOrdering, string> = {\r\n    'Most Relevant': '',\r\n    'Most Recent': 'mr',\r\n    'Most Viewed': 'mv',\r\n    'Top Rated': 'tr',\r\n    'Longest': 'lg',\r\n}\r\n\r\nexport const GifOrderingMapping: Record<GifSearchOrdering, string> = {\r\n    'Most Relevant': '',\r\n    'Most Recent': 'mr',\r\n    'Most Viewed': 'mv',\r\n    'Top Rated': 'tr',\r\n}\r\n\r\nexport const AlbumOrderingMapping: Record<AlbumSearchOrdering, string> = {\r\n    'Most Relevant': '',\r\n    'Most Recent': 'mr',\r\n    'Most Viewed': 'mv',\r\n    'Top Rated': 'tr',\r\n}\r\n\r\nexport const PornstarOrderingMapping: Record<PornstarSearchOrdering, string> = {\r\n    'Most Relevant': '',\r\n    'Most Popular': 'mp',\r\n    'Most Viewed': 'mv',\r\n    'No. of Video': 'nv',\r\n}\r\n\r\nexport const VideoListOrderingMapping: Record<VideoListOrdering, string> = {\r\n    'Featured Recently': '',\r\n    'Most Viewed': 'mv',\r\n    'Top Rated': 'tr',\r\n    'Hottest': 'ht',\r\n    'Longest': 'lg',\r\n    'Newest': 'cm',\r\n}\r\n\r\nexport const PornstarListOrderingMapping: Record<PornstarListOrdering, string> = {\r\n    'Most Popular': '',\r\n    'Most Viewed': 'mv',\r\n    'Top Trending': 't',\r\n    'Most Subscribed': 'ms',\r\n    'Alphabetical': 'a',\r\n    'No. of Videos': 'nv',\r\n    'Random': 'r',\r\n}\r\n\r\nexport const RecommendedOrderingMapping: Record<RecommendedOrdering, string> = {\r\n    'Most Relevant': '',\r\n    'Most Recent': 'time',\r\n}\r\n","export type SearchPeriod = 'weekly' | 'monthly' | 'alltime'\r\n\r\nexport type PornstarSearchPopularPeriod = 'weekly' | 'monthly' | 'yearly'\r\n\r\nexport type PornstarSearchViewedPeriod = 'daily' | 'weekly' | 'monthly' | 'alltime'\r\n\r\nexport const PornstarPopularPeriodMapping: Record<PornstarSearchPopularPeriod, string> = {\r\n    weekly: 'w',\r\n    monthly: '',\r\n    yearly: 'a',\r\n}\r\n\r\nexport const PornstarViewedPeriodMapping: Record<PornstarSearchViewedPeriod, string> = {\r\n    daily: 't',\r\n    weekly: 'w',\r\n    monthly: 'm',\r\n    alltime: '',\r\n}\r\n\r\nexport type VideoSearchPeriod = 'daily' | 'weekly' | 'monthly' | 'yearly' | 'alltime'\r\n\r\nexport const VideoSearchPeriodMapping: Record<VideoSearchPeriod, string> = {\r\n    daily: 't',\r\n    weekly: 'w',\r\n    monthly: 'm',\r\n    yearly: 'y',\r\n    alltime: '',\r\n}\r\n","export const CountryMapping = {\r\n    'Argentina': 'ar',\r\n    'Australia': 'au',\r\n    'Austria': 'at',\r\n    'Belgium': 'be',\r\n    'Brazil': 'br',\r\n    'Bulgaria': 'bg',\r\n    'Canada': 'ca',\r\n    'Chile': 'cl',\r\n    'Croatia': 'hr',\r\n    'Czech Republic': 'cz',\r\n    'Denmark': 'dk',\r\n    'Egypt': 'eg',\r\n    'Finland': 'fi',\r\n    'France': 'fr',\r\n    'Germany': 'de',\r\n    'Greece': 'gr',\r\n    'Hungary': 'hu',\r\n    'India': 'in',\r\n    'Ireland': 'ie',\r\n    'Israel': 'il',\r\n    'Italy': 'it',\r\n    'Japan': 'jp',\r\n    'Korea': 'kr',\r\n    'Mexico': 'mx',\r\n    'Morocco': 'ma',\r\n    'Netherlands': 'nl',\r\n    'New Zealand': 'nz',\r\n    'Norway': 'no',\r\n    'Pakistan': 'pk',\r\n    'Poland': 'pl',\r\n    'Portugal': 'pt',\r\n    'Romania': 'ro',\r\n    'Russia': 'ru',\r\n    'Serbia': 'rs',\r\n    'Slovakia': 'sk',\r\n    'Spain': 'es',\r\n    'Sweden': 'se',\r\n    'Switzerland': 'ch',\r\n    'United Kingdom': 'gb',\r\n    'Ukraine': 'ua',\r\n    'United States': 'us',\r\n    'World': 'world',\r\n}\r\n\r\nexport type Country = keyof typeof CountryMapping\r\n","export const BASE_URL = 'https://www.pornhub.com'\r\n","/**\r\n * Transform a string into a search keyword that can be used in search.\r\n *\r\n * @example\r\n * \"luna test 1\" => \"luna+test+1\"\r\n * \"  luna    +test+1 \" => \"luna+test+1\"\r\n * \"（香港］ +学 生\" => \"香港+学+生\"\r\n */\r\nexport function searchify(keyword: string) {\r\n    return keyword\r\n        .replace(/^[ \\t]+|[ \\t]+$/gi, '')\r\n        .replace(/[\\.,'/:=\\(\\)&!\\?@\\[\\]\"\\*\\$#%\\^;\\|`\\\\~><¿\\{\\}\\+]/gi, ' ')\r\n        .replace(/[éèëê]/gi, 'e')\r\n        .replace(/[äàâ]/gi, 'a')\r\n        .replace(/[üùû]/gi, 'u')\r\n        .replace(/[îï]/gi, 'i')\r\n        .replace(/ô/gi, 'o')\r\n        .replace(/ç/gi, 'c')\r\n        .replace(/【/gi, '')\r\n        .replace(/】/gi, '')\r\n        .replace(/〈/gi, '')\r\n        .replace(/〉/gi, '')\r\n        .replace(/〖/gi, '')\r\n        .replace(/〗/gi, '')\r\n        .replace(/（/gi, '')\r\n        .replace(/）/gi, '')\r\n        // eslint-disable-next-line no-irregular-whitespace\r\n        .replace(/　/gi, '')\r\n        .replace(/〔/gi, '')\r\n        .replace(/〕/gi, '')\r\n        .replace(/『/gi, '')\r\n        .replace(/』/gi, '')\r\n        .replace(/］/gi, '')\r\n        .replace(/［/gi, '')\r\n        .trim()\r\n        .split(/\\s+/)\r\n        .join('+')\r\n}\r\n\r\n/**\r\n * ['uncategorized', 'transgender', 'straight', 'misc', 'male', 'gay', 'female']\r\n * => 'female-gay-male-misc-straight-transgender-uncategorized'\r\n */\r\nexport function dashify(keywords: string | string[]) {\r\n    if (!Array.isArray(keywords)) return keywords.trim()\r\n\r\n    return keywords\r\n        .map(keyword => keyword.trim())\r\n        .filter(keyword => keyword.length > 0)\r\n        .sort((a, b) => a.localeCompare(b))\r\n        .join('-')\r\n}\r\n\r\n/**\r\n * \"Eva Elfie\" => \"eva-elfie\"\r\n * \"Luna Okko\" => \"luna-okko\"\r\n */\r\nexport function slugify(keyword: string) {\r\n    return keyword\r\n        .replace(/[^a-zA-Z0-9\\s]/g, ' ')\r\n        .trim()\r\n        .split(/\\s+/)\r\n        .join('-')\r\n}\r\n","import { Route } from './route'\r\nimport type { Engine } from '../core/engine'\r\n\r\nexport async function getMainPage(engine: Engine) {\r\n    const url = Route.mainPage()\r\n    const res = await engine.request.get(url)\r\n    const html = await res.text()\r\n    return html\r\n}\r\n","import * as cheerio from 'cheerio'\r\nimport type { Cheerio, Element } from 'cheerio'\r\n\r\nexport function getCheerio(html: string) {\r\n    return cheerio.load(html)\r\n}\r\n\r\nexport function getAttribute<T, R = T>(el: Cheerio<Element>, name: string, defaultValue: R): T | R\r\nexport function getAttribute<T>(el: Cheerio<Element>, name: string): T | null | undefined\r\nexport function getAttribute<T, R>(el: Cheerio<Element>, name: string, defaultValue?: R): T | R | null | undefined {\r\n    return <T>el.attr(name) ?? defaultValue\r\n}\r\n\r\nexport function getDataAttribute<T, R = T>(el: Cheerio<Element>, name: string, defaultValue: R): T | R\r\nexport function getDataAttribute<T>(el: Cheerio<Element>, name: string): T | null | undefined\r\nexport function getDataAttribute<T, R>(el: Cheerio<Element>, name: string, defaultValue?: R): T | R | null | undefined {\r\n    return <T>el.data(name) ?? defaultValue\r\n}\r\n","import { getCheerio } from '../utils/cheerio'\r\nimport { getMainPage } from './getMainPage'\r\nimport { Route } from './route'\r\nimport type { Engine } from '../core/engine'\r\n\r\ninterface LoginResult {\r\n    success: boolean\r\n    message: string\r\n    premium_redirect_cookie: string\r\n}\r\n\r\nexport async function login(engine: Engine, account: string, password: string) {\r\n    if (!account || typeof account !== 'string') throw new Error('Invalid Account')\r\n    if (!password || typeof password !== 'string') throw new Error('Invalid Password')\r\n\r\n    const { token, redirect } = await getToken(engine)\r\n    const result = await sendLoginForm(engine, account, password, token, redirect)\r\n\r\n    if (result.success) {\r\n        return {\r\n            success: true,\r\n            message: 'Successfully logged in.',\r\n            premium: result.premium_redirect_cookie === '1',\r\n        }\r\n    }\r\n    else {\r\n        return {\r\n            success: false,\r\n            message: `Login fail, Reason: ${result.message}`,\r\n            premium: false,\r\n        }\r\n    }\r\n}\r\n\r\nasync function getToken(engine: Engine) {\r\n    try {\r\n        const html = await getMainPage(engine)\r\n        const $ = getCheerio(html)\r\n        const token = $('[name=\"token\"]').attr('value') || ''\r\n        const redirect = $('[name=\"redirect\"]').attr('value') || ''\r\n        return { token, redirect }\r\n    }\r\n    catch (err) {\r\n        return await Promise.reject(err)\r\n    }\r\n}\r\n\r\nasync function sendLoginForm(engine: Engine, account: string, password: string, token: string, redirect: string) {\r\n    const data = {\r\n        redirect,\r\n        token,\r\n        remember_me: 1,\r\n        from: 'pc_login_modal_:show',\r\n        username: account,\r\n        password,\r\n        setSendTip: false,\r\n    }\r\n\r\n    const res = await engine.request.postForm(Route.authenticate(), data)\r\n    const result = await res.json() as LoginResult\r\n    return result\r\n}\r\n","import { getMainPage } from './getMainPage'\r\nimport { Route } from './route'\r\nimport type { Engine } from '../core/engine'\r\n\r\nexport async function logout(engine: Engine) {\r\n    try {\r\n        const mainPage = await getMainPage(engine)\r\n        const result = /href=\"\\/user\\/logout\\?token=([a-zA-Z0-9-_.]*?)\"/.exec(mainPage)\r\n        if (!result) throw new Error('Logout failed')\r\n\r\n        const token = result[1]\r\n        await engine.request.get(Route.logout(token))\r\n\r\n        return {\r\n            success: true,\r\n            message: 'Successfully logged out',\r\n        }\r\n    }\r\n    catch (err) {\r\n        return Promise.reject(err)\r\n    }\r\n}\r\n","import { getCheerio, getDataAttribute } from '../utils/cheerio'\r\nimport { getMainPage } from './getMainPage'\r\nimport type { Engine } from '../core/engine'\r\n\r\nexport async function getToken(engine: Engine) {\r\n    const html = await getMainPage(engine)\r\n    const $ = getCheerio(html)\r\n    const inputEl = $('form#search_form input[name=\"search\"]')\r\n    const token = getDataAttribute<string, null>(inputEl, 'token', null)\r\n    if (!token) throw new Error('Failed to get token')\r\n    return token\r\n}\r\n","import { getToken } from './getToken'\r\nimport { Route } from './route'\r\nimport type { Engine } from '../core/engine'\r\nimport type { AutoCompleteOptions } from '../types'\r\nimport type { AutoCompleteResponse } from '../types/AutoComplete'\r\n\r\nexport async function getAutoComplete(engine: Engine, keyword: string, options: AutoCompleteOptions) {\r\n    const token = options.token ?? await getToken(engine)\r\n    const res = await engine.request.get(Route.autocomplete(keyword, {\r\n        ...options,\r\n        token,\r\n    }))\r\n    const result = await res.json() as AutoCompleteResponse\r\n\r\n    return {\r\n        ...result,\r\n        models: result.models?.map(item => ({\r\n            ...item,\r\n            url: Route.modelPage(item.slug),\r\n        })).sort((a, b) => a.rank - b.rank) ?? [],\r\n        pornstars: result.pornstars?.map(item => ({\r\n            ...item,\r\n            url: Route.pornstarPage(item.slug),\r\n        })).sort((a, b) => a.rank - b.rank) ?? [],\r\n        channels: result.channels?.map(item => ({\r\n            ...item,\r\n            url: Route.channelPage(item.slug),\r\n        })).sort((a, b) => +a.rank - +b.rank) ?? [],\r\n    }\r\n}\r\n","import fs from 'node:fs'\r\nimport path from 'node:path'\r\nimport process from 'node:process'\r\nimport createDebug from 'debug'\r\nimport type { Request } from './request'\r\n\r\nconst debug = createDebug('DUMP')\r\n\r\nexport class Dumper {\r\n    constructor(private request: Request) {}\r\n\r\n    enable(_dumpPagePath: string) {\r\n        const dumpPagePath = _dumpPagePath ? path.resolve(_dumpPagePath) : path.join(process.cwd(), '_dump')\r\n        if (!fs.existsSync(dumpPagePath)) {\r\n            fs.mkdirSync(dumpPagePath, { recursive: true })\r\n        }\r\n\r\n        this.request.eventEmitter.on('responseHTML', ({ url, html }) => {\r\n            const normalizedPath = this.getNormalizedUrlPath(url)\r\n            const filename = `${normalizedPath}.html`\r\n            const filePath = path.join(dumpPagePath, filename)\r\n            debug(filePath)\r\n            fs.writeFileSync(filePath, html)\r\n        })\r\n\r\n        this.request.eventEmitter.on('responseJSON', ({ url, json }) => {\r\n            const normalizedPath = this.getNormalizedUrlPath(url)\r\n            const filename = `${normalizedPath}.json`\r\n            const filePath = path.join(dumpPagePath, filename)\r\n            debug(filePath)\r\n            fs.writeFileSync(filePath, JSON.stringify(json, null, 4))\r\n        })\r\n    }\r\n\r\n    private getNormalizedUrlPath(url: URL) {\r\n        const now = Date.now()\r\n        const path = url.pathname\r\n            .replace(/\\/$/, '')\r\n            .replace(/\\//g, '_')\r\n        || 'index'\r\n        return `${now}_${path}`\r\n    }\r\n}\r\n","import { URLSearchParams } from 'node:url'\r\nimport createDebug from 'debug'\r\nimport fetch from 'node-fetch'\r\nimport { getCheerio } from '../utils/cheerio'\r\nimport { HttpStatusError, IllegalError } from '../utils/error'\r\nimport eventEmitter from './eventEmitter'\r\nimport type { HeadersInit, RequestInit, Response } from 'node-fetch'\r\n\r\ninterface Cookie {\r\n    value: string\r\n    expires: Date\r\n}\r\n\r\nconst debug = createDebug('REQUEST')\r\nconst nonExpireDate = new Date(9999, 1, 1)\r\n\r\n// eslint-disable-next-line ts/consistent-type-definitions\r\ntype EventsMap = {\r\n    responseHTML: {\r\n        url: URL\r\n        html: string\r\n    }\r\n    responseJSON: {\r\n        url: URL\r\n        json: unknown\r\n    }\r\n}\r\n\r\nexport class Request {\r\n    private _agent: RequestInit['agent']\r\n    private _headers: Record<string, string> = {}\r\n    private _cookieStore: Map<string, Cookie> = new Map()\r\n\r\n    eventEmitter = eventEmitter<EventsMap>()\r\n\r\n    setAgent(agent: RequestInit['agent']) {\r\n        this._agent = agent\r\n    }\r\n\r\n    setHeader(key: string, value: string) {\r\n        if (key !== 'Cookie') debug(`[Header] Set: ${key}=${value}`)\r\n        this._headers[key] = value\r\n    }\r\n\r\n    private _checkCookieExpired() {\r\n        const now = Date.now()\r\n        this._cookieStore.forEach((cookie, key) => {\r\n            if (cookie.expires.getTime() < now) {\r\n                debug(`[Cookie] Expired: ${key}`)\r\n                this._cookieStore.delete(key)\r\n            }\r\n        })\r\n    }\r\n\r\n    private get cookieString() {\r\n        this._checkCookieExpired()\r\n        return Array.from(this._cookieStore).map(([k, v]) => `${encodeURIComponent(k)}=${encodeURIComponent(v.value)}`).join('; ')\r\n    }\r\n\r\n    getCookies(): Record<string, string> {\r\n        this._checkCookieExpired()\r\n        return [...this._cookieStore].reduce((acc, [k, v]) => {\r\n            acc[k] = v.value\r\n            return acc\r\n        }, {} as Record<string, string>)\r\n    }\r\n\r\n    getCookie(key: string): string | undefined {\r\n        this._checkCookieExpired()\r\n        return this._cookieStore.get(key)?.value\r\n    }\r\n\r\n    setCookie(key: string, value: string) {\r\n        debug(`[Cookie] Set: ${key}=${value}`)\r\n        this._cookieStore.set(key, {\r\n            value,\r\n            expires: nonExpireDate,\r\n        })\r\n    }\r\n\r\n    deleteCookie(key: string) {\r\n        debug(`[Cookie] Del: ${key}`)\r\n        this._cookieStore.delete(key)\r\n    }\r\n\r\n    private async _checkStatus(res: Response) {\r\n        if (res.ok) return res\r\n\r\n        if (res.status === 404) {\r\n            let html = ''\r\n            try {\r\n                html = await res.text()\r\n            }\r\n            catch (error) {\r\n                // ignore\r\n            }\r\n\r\n            if (/class=\"deterrenceWarn\"/.test(html)) {\r\n                const $ = getCheerio(html)\r\n                const warning = $('.deterrenceWarn').text()\r\n                if (warning) {\r\n                    return Promise.reject(new IllegalError(warning))\r\n                }\r\n            }\r\n        }\r\n        return Promise.reject(new HttpStatusError(`${res.status} ${res.statusText} at ${res.url}`))\r\n    }\r\n\r\n    private _parseCookieItem(str: string): [string, Cookie] {\r\n        const [first, ...rest] = str.split(';').map(item => item.trim())\r\n        const [key, value] = first.split('=')\r\n        const restAttrs = rest.reduce((acc, item) => {\r\n            const [k, v] = item.split('=')\r\n            acc[k.toLowerCase()] = v\r\n            return acc\r\n        }, {} as Record<string, string>)\r\n\r\n        let expires = nonExpireDate\r\n        if (restAttrs['max-age']) expires = new Date(Date.now() + Number(restAttrs['max-age']) * 1000)\r\n        else if (restAttrs.expires) expires = new Date(restAttrs.expires)\r\n\r\n        return [key, { value, expires }]\r\n    }\r\n\r\n    private _handleSetCookie(res: Response) {\r\n        if (!res.headers.raw()['set-cookie']) return res\r\n\r\n        res.headers.raw()['set-cookie'].forEach((item) => {\r\n            debug(`[Cookie] Received Set-Cookie: ${item}`)\r\n            const [key, cookie] = this._parseCookieItem(item)\r\n            this._cookieStore.set(key, cookie)\r\n        })\r\n\r\n        return res\r\n    }\r\n\r\n    private _buildParams<U extends Record<string, any>>(data: U) {\r\n        const params = new URLSearchParams()\r\n        Object.keys(data).forEach((key) => {\r\n            params.append(key, data[key])\r\n        })\r\n        return params\r\n    }\r\n\r\n    private _buildRequest<U extends Record<string, any>>(method: 'get' | 'post' | 'post-form', url: string, data?: U) {\r\n        const headers: HeadersInit = {}\r\n        const opts: RequestInit = { method, headers }\r\n\r\n        if (method === 'post') {\r\n            headers['Content-Type'] = 'application/json'\r\n            opts.body = JSON.stringify(data)\r\n        }\r\n\r\n        if (method === 'post-form') {\r\n            // headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8'\r\n            opts.method = 'post'\r\n            if (data) opts.body = this._buildParams<U>(data)\r\n        }\r\n\r\n        return this.fetch(url, opts)\r\n    }\r\n\r\n    private async _handleListener(method: string, response: Response) {\r\n        if (method !== 'GET') return\r\n\r\n        const url = new URL(response.url)\r\n        const contentType = response.headers.get('content-type') || ''\r\n\r\n        if (this.eventEmitter.has('responseHTML')) {\r\n            if (contentType.includes('application/json')) {\r\n                const copiedRes = response.clone()\r\n                const json = await copiedRes.json()\r\n                this.eventEmitter.emit('responseJSON', { url, json })\r\n            }\r\n        }\r\n\r\n        if (this.eventEmitter.has('responseJSON')) {\r\n            if (contentType.includes('text/html')) {\r\n                const copiedRes = response.clone()\r\n                const html = await copiedRes.text()\r\n                this.eventEmitter.emit('responseHTML', { url, html })\r\n            }\r\n        }\r\n    }\r\n\r\n    async fetch(url: string, opts: RequestInit = {}): Promise<Response> {\r\n        const headers = Object.assign({}, this._headers, opts.headers, {\r\n            cookie: this.cookieString,\r\n        })\r\n\r\n        const method = opts.method?.toUpperCase() || 'GET'\r\n        debug(`[ RQST ] ${method} ${url}`)\r\n\r\n        const res = await fetch(url, {\r\n            ...opts,\r\n            headers,\r\n            ...(this._agent && { agent: this._agent }),\r\n        })\r\n\r\n        debug(`[ RESP ] ${method} ${url} ${res.status} ${res.statusText}`)\r\n\r\n        if (res.url !== url) {\r\n            debug(`Redirected from ${url} to ${res.url}`)\r\n        }\r\n\r\n        this._handleListener(method, res)\r\n\r\n        await this._checkStatus(res)\r\n        this._handleSetCookie(res)\r\n\r\n        return res\r\n    }\r\n\r\n    get(url: string) {\r\n        return this._buildRequest('get', url)\r\n    }\r\n\r\n    post<U extends object = any>(url: string, data: U) {\r\n        return this._buildRequest('post', url, data)\r\n    }\r\n\r\n    postForm<U extends object = any>(url: string, data: U) {\r\n        return this._buildRequest('post-form', url, data)\r\n    }\r\n}\r\n","export class HttpStatusError extends Error {}\r\n\r\nexport class IllegalError extends Error {}\r\n","/**\r\n * Forked from https://github.com/developit/mitt/blob/main/src/index.ts\r\n *\r\n * MIT License © Jason Miller\r\n *\r\n * Modified by Pionxzh\r\n *\r\n * - Add `has` method\r\n */\r\nexport type EventType = string | symbol\r\n\r\n// An event handler can take an optional event argument\r\n// and should not return a value\r\nexport type Handler<T = unknown> = (event: T) => void\r\nexport type WildcardHandler<T = Record<string, unknown>> = (\r\n    type: keyof T,\r\n    event: T[keyof T]\r\n) => void\r\n\r\n// An array of all currently registered event handlers for a type\r\nexport type EventHandlerList<T = unknown> = Array<Handler<T>>\r\nexport type WildCardEventHandlerList<T = Record<string, unknown>> = Array<\r\n    WildcardHandler<T>\r\n>\r\n\r\n// A map of event types and their corresponding event handlers.\r\nexport type EventHandlerMap<Events extends Record<EventType, unknown>> = Map<\r\n    keyof Events | '*',\r\n    EventHandlerList<Events[keyof Events]> | WildCardEventHandlerList<Events>\r\n>\r\n\r\nexport interface Emitter<Events extends Record<EventType, unknown>> {\r\n    all: EventHandlerMap<Events>\r\n\r\n    has<Key extends keyof Events>(type: Key): boolean\r\n\r\n    on<Key extends keyof Events>(type: Key, handler: Handler<Events[Key]>): void\r\n    on(type: '*', handler: WildcardHandler<Events>): void\r\n\r\n    off<Key extends keyof Events>(\r\n        type: Key,\r\n        handler?: Handler<Events[Key]>\r\n    ): void\r\n    off(type: '*', handler: WildcardHandler<Events>): void\r\n\r\n    emit<Key extends keyof Events>(type: Key, event: Events[Key]): void\r\n    emit<Key extends keyof Events>(\r\n        type: undefined extends Events[Key] ? Key : never\r\n    ): void\r\n}\r\n\r\n/**\r\n * Mitt: Tiny (~200b) functional event emitter / pubsub.\r\n * @name mitt\r\n * @returns {Mitt}\r\n */\r\nexport default function mitt<Events extends Record<EventType, unknown>>(\r\n    all?: EventHandlerMap<Events>,\r\n): Emitter<Events> {\r\n    type GenericEventHandler =\r\n        | Handler<Events[keyof Events]>\r\n        | WildcardHandler<Events>\r\n    all = all || new Map()\r\n\r\n    return {\r\n        /**\r\n         * A Map of event names to registered handler functions.\r\n         */\r\n        all,\r\n\r\n        /**\r\n         * Check whether an event handler of the given type exists.\r\n         * @param {string|symbol} type of event to check\r\n         * @memberOf mitt\r\n         */\r\n        has<Key extends keyof Events>(type: Key) {\r\n            return all!.has(type)\r\n        },\r\n\r\n        /**\r\n         * Register an event handler for the given type.\r\n         * @param {string|symbol} type Type of event to listen for, or `'*'` for all events\r\n         * @param {Function} handler Function to call in response to given event\r\n         * @memberOf mitt\r\n         */\r\n        on<Key extends keyof Events>(type: Key, handler: GenericEventHandler) {\r\n            const handlers: Array<GenericEventHandler> | undefined = all!.get(type)\r\n            if (handlers) {\r\n                handlers.push(handler)\r\n            }\r\n            else {\r\n                all!.set(type, [handler] as EventHandlerList<Events[keyof Events]>)\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Remove an event handler for the given type.\r\n         * If `handler` is omitted, all handlers of the given type are removed.\r\n         * @param {string|symbol} type Type of event to unregister `handler` from (`'*'` to remove a wildcard handler)\r\n         * @param {Function} [handler] Handler function to remove\r\n         * @memberOf mitt\r\n         */\r\n        off<Key extends keyof Events>(type: Key, handler?: GenericEventHandler) {\r\n            const handlers: Array<GenericEventHandler> | undefined = all!.get(type)\r\n            if (handlers) {\r\n                if (handler) {\r\n                    handlers.splice(handlers.indexOf(handler) >>> 0, 1)\r\n                }\r\n                else {\r\n                    all!.set(type, [])\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Invoke all handlers for the given type.\r\n         * If present, `'*'` handlers are invoked after type-matched handlers.\r\n         *\r\n         * Note: Manually firing '*' handlers is not supported.\r\n         *\r\n         * @param {string|symbol} type The event type to invoke\r\n         * @param {Any} [evt] Any value (object is recommended and powerful), passed to each handler\r\n         * @memberOf mitt\r\n         */\r\n        emit<Key extends keyof Events>(type: Key, evt?: Events[Key]) {\r\n            let handlers = all!.get(type)\r\n            if (handlers) {\r\n                (handlers as EventHandlerList<Events[keyof Events]>)\r\n                    .slice()\r\n                    .forEach((handler) => {\r\n                        handler(evt!)\r\n                    })\r\n            }\r\n\r\n            handlers = all!.get('*')\r\n            if (handlers) {\r\n                (handlers as WildCardEventHandlerList<Events>)\r\n                    .slice()\r\n                    .forEach((handler) => {\r\n                        handler(type, evt!)\r\n                    })\r\n            }\r\n        },\r\n    }\r\n}\r\n","import { BASE_URL } from '../utils/constant'\r\nimport { Dumper } from './dumper'\r\nimport { Request } from './request'\r\n\r\nexport class Engine {\r\n    BASE_URL = BASE_URL\r\n    request = new Request()\r\n    dumper = new Dumper(this.request)\r\n\r\n    // Flag to indicate whether the engine has visited the main page to get the cookies.\r\n    // See issue: https://github.com/pionxzh/Pornhub.js/issues/27\r\n    warmedUp = false\r\n\r\n    constructor() {\r\n        this.request.setHeader('Host', this.BASE_URL.replace('https://', ''))\r\n        this.request.setHeader('Origin', this.BASE_URL)\r\n        this.request.setHeader('Referer', `${this.BASE_URL}/`)\r\n        this.request.setHeader('User-Agent', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36')\r\n\r\n        this.request.setCookie('platform', 'pc')\r\n        // bypass age confirmation\r\n        this.request.setCookie('accessAgeDisclaimerPH', '1')\r\n        this.request.setCookie('accessAgeDisclaimerUK', '1')\r\n        this.request.setCookie('accessPH', '1')\r\n        this.request.setCookie('age_verified', '1')\r\n        // disable AtatusJs (RUM and error tracking)\r\n        this.request.setCookie('atatusScript', 'hide')\r\n        // disable cookie banner\r\n        this.request.setCookie('cookiesBannerSeen', '1')\r\n\r\n        this.request.setCookie('hasVisited', '1')\r\n    }\r\n}\r\n","import { WebmasterRoute } from '../route'\r\nimport type { Engine } from '../../core/engine'\r\n\r\nexport interface WebmasterCategory {\r\n    categories: Category[]\r\n}\r\n\r\nexport interface Category {\r\n    /**\r\n     * The official API is inconsistent with the type of id.\r\n     * Sometimes it's all numbers, sometimes it's all strings.\r\n     */\r\n    id: number | string\r\n    category: string\r\n}\r\n\r\nexport async function categories(engine: Engine): Promise<Category[]> {\r\n    try {\r\n        const res = await engine.request.get(WebmasterRoute.categories())\r\n        const result = await res.json() as WebmasterCategory\r\n        return result.categories.sort((a, b) => +a.id - +b.id)\r\n    }\r\n    catch (err) {\r\n        console.error(err)\r\n        return []\r\n    }\r\n}\r\n","import { WebmasterRoute } from '../route'\r\nimport type { Engine } from '../../core/engine'\r\n\r\nexport interface WebmasterDeleted {\r\n    videos: DeletedVideo[]\r\n}\r\n\r\nexport interface DeletedVideo {\r\n    vkey: string\r\n    deleted_on: string\r\n}\r\n\r\nexport async function deleted(engine: Engine, page: number): Promise<DeletedVideo[]> {\r\n    try {\r\n        const res = await engine.request.get(WebmasterRoute.deletedVideos(page))\r\n        const result = await res.json() as WebmasterDeleted\r\n        return result.videos\r\n    }\r\n    catch (err) {\r\n        console.error(err)\r\n        return []\r\n    }\r\n}\r\n","import { slugify } from './string'\r\n\r\nexport class UrlParser {\r\n    static getVideoID(url: string) {\r\n        const UrlRule = /[\\w]+\\.pornhub\\.com\\/view_video\\.php\\?viewkey=([a-zA-z0-9]{1,30})/\r\n        const id = UrlRule.test(url) ? UrlRule.exec(url)![1] : url\r\n        return id\r\n    }\r\n\r\n    static getAlbumID(url: string) {\r\n        const UrlRule = /[\\w]+\\.pornhub\\.com\\/album\\/([0-9]{1,30})/\r\n        const id = UrlRule.test(url) ? UrlRule.exec(url)![1] : url\r\n        return id\r\n    }\r\n\r\n    static getPhotoID(url: string) {\r\n        const UrlRule = /[\\w]+\\.pornhub\\.com\\/photo\\/([0-9]{1,30})/\r\n        const id = UrlRule.test(url) ? UrlRule.exec(url)![1] : url\r\n        return id\r\n    }\r\n\r\n    static getPornstarName(url: string) {\r\n        const UrlRule = /[\\w]+\\.pornhub\\.com\\/pornstar\\/([a-zA-z0-9-]{1,30})/\r\n        const name = UrlRule.test(url) ? UrlRule.exec(url)![1] : slugify(url)\r\n        return name\r\n    }\r\n\r\n    static getModelName(url: string) {\r\n        const UrlRule = /[\\w]+\\.pornhub\\.com\\/model\\/([a-zA-z0-9-]{1,30})/\r\n        const name = UrlRule.test(url) ? UrlRule.exec(url)![1] : slugify(url)\r\n        return name\r\n    }\r\n\r\n    static getChannelName(url: string) {\r\n        const UrlRule = /[\\w]+\\.pornhub\\.com\\/channels\\/([a-zA-z0-9-]{1,30})/\r\n        const name = UrlRule.test(url) ? UrlRule.exec(url)![1] : slugify(url)\r\n        return name\r\n    }\r\n}\r\n","import { UrlParser } from '../../utils/url'\r\nimport { WebmasterRoute } from '../route'\r\nimport type { Engine } from '../../core/engine'\r\n\r\nexport type WebmasterEmbed =\r\n{\r\n    embed: {\r\n        code: string\r\n    }\r\n} | {\r\n    code: string // '2002' stands for \"No video with this ID.\"\r\n    message: string\r\n    example: string\r\n}\r\n\r\nexport async function video_embed_code(engine: Engine, urlOrId: string): Promise<string | null> {\r\n    try {\r\n        const id = UrlParser.getVideoID(urlOrId)\r\n        const res = await engine.request.get(WebmasterRoute.video_embed_code(id))\r\n        const result = await res.json() as WebmasterEmbed\r\n\r\n        if ('code' in result) throw new Error(result.message)\r\n\r\n        return result.embed.code\r\n            .replace(/&lt;/g, '<')\r\n            .replace(/&gt;/g, '>')\r\n            .replace(/&quot;/g, '\"')\r\n    }\r\n    catch (err) {\r\n        console.error(err)\r\n        return null\r\n    }\r\n}\r\n","import type { VideoDetail, VideoResponse } from '../../../types'\r\n\r\nexport function videoTransform(response: VideoResponse): VideoDetail {\r\n    const {\r\n        duration,\r\n        views,\r\n        video_id,\r\n        rating,\r\n        ratings,\r\n        title,\r\n        url,\r\n        default_thumb,\r\n        thumb,\r\n        publish_date,\r\n        thumbs,\r\n        tags,\r\n        pornstars,\r\n        categories,\r\n        segment,\r\n    } = response\r\n\r\n    // vote\r\n    const total = ratings\r\n    const up = Math.round(total * rating / 100)\r\n    const down = total - up\r\n    const vote = { up, down, total, rating: Math.round(rating * 100) / 100 }\r\n\r\n    return {\r\n        duration,\r\n        views,\r\n        video_id,\r\n        vote,\r\n        title,\r\n        url,\r\n        default_thumb,\r\n        thumb,\r\n        publish_date,\r\n        thumbs: thumbs.map(({ width, height, src }) => ({ width, height, src })),\r\n        tags: tags.map(x => x.tag_name),\r\n        pornstars: pornstars.map(x => x.pornstar_name),\r\n        categories: categories.map(x => x.category),\r\n        segment,\r\n    }\r\n}\r\n","import { WebmasterRoute } from '../route'\r\nimport { videoTransform } from './utils/videoTransform'\r\nimport type { Engine } from '../../core/engine'\r\nimport type { VideoDetail, VideoResponse, WebmasterSearchOptions } from '../../types'\r\n\r\nexport interface WebmasterSearch {\r\n    videos: VideoResponse[]\r\n}\r\n\r\nexport async function search(engine: Engine, keyword: string, options: WebmasterSearchOptions): Promise<VideoDetail[]> {\r\n    try {\r\n        const res = await engine.request.get(WebmasterRoute.search(keyword, options))\r\n        const result = await res.json() as WebmasterSearch\r\n        return result.videos.map(x => videoTransform(x))\r\n    }\r\n    catch (err) {\r\n        console.error(err)\r\n        return []\r\n    }\r\n}\r\n","import { WebmasterRoute } from '../route'\r\nimport type { Engine } from '../../core/engine'\r\n\r\nexport interface WebmasterStars {\r\n    stars: WebmasterStar[]\r\n}\r\n\r\nexport interface WebmasterStar {\r\n    star: {\r\n        star_name: string\r\n    }\r\n}\r\n\r\nexport async function stars(engine: Engine): Promise<string[]> {\r\n    try {\r\n        const res = await engine.request.get(WebmasterRoute.stars())\r\n        const result = await res.json() as WebmasterStars\r\n        return result.stars.map(x => x.star.star_name)\r\n    }\r\n    catch (err) {\r\n        console.error(err)\r\n        return []\r\n    }\r\n}\r\n","import { WebmasterRoute } from '../route'\r\nimport type { Engine } from '../../core/engine'\r\n\r\nexport interface WebmasterStarsDetailed {\r\n    stars: Array<{ star: DetailedStar }>\r\n}\r\n\r\nexport interface DetailedStar {\r\n    star_name: string\r\n    star_thumb: string\r\n    star_url: string\r\n    gender: 'male' | 'female' | (string & {})\r\n    videos_count_all: string\r\n}\r\n\r\nexport async function stars_detailed(engine: Engine): Promise<DetailedStar[]> {\r\n    try {\r\n        const res = await engine.request.get(WebmasterRoute.stars_detailed())\r\n        const result = await res.json() as WebmasterStarsDetailed\r\n        return result.stars.map(x => x.star)\r\n    }\r\n    catch (err) {\r\n        console.error(err)\r\n        return []\r\n    }\r\n}\r\n","import { WebmasterRoute } from '../route'\r\nimport type { Engine } from '../../core/engine'\r\n\r\nexport interface WebmasterTags {\r\n    tagsCount: number\r\n    tags: string[]\r\n}\r\n\r\n/**\r\n * Warning: We had to change the response structure due to high amount of tags. Please adjust your code\r\n * -- message from the official API\r\n *\r\n * I don't know what they actually changed :/\r\n */\r\nexport async function tags(engine: Engine, letter: string): Promise<string[]> {\r\n    try {\r\n        const res = await engine.request.get(WebmasterRoute.tags(letter))\r\n        const result = await res.json() as WebmasterTags\r\n        return result.tags\r\n    }\r\n    catch (err) {\r\n        console.error(err)\r\n        return []\r\n    }\r\n}\r\n","import { UrlParser } from '../../utils/url'\r\nimport { WebmasterRoute } from '../route'\r\nimport { videoTransform } from './utils/videoTransform'\r\nimport type { Engine } from '../../core/engine'\r\nimport type { ThumbSize, VideoDetail, VideoResponse } from '../../types'\r\n\r\nexport interface WebmasterVideoById {\r\n    video: VideoResponse\r\n}\r\n\r\nexport async function video_by_id(engine: Engine, urlOrId: string, thumbsize: ThumbSize = 'large'): Promise<VideoDetail> {\r\n    const id = UrlParser.getVideoID(urlOrId)\r\n    const res = await engine.request.get(WebmasterRoute.video_by_id(id, thumbsize))\r\n    const result = await res.json() as WebmasterVideoById\r\n    return videoTransform(result.video)\r\n}\r\n","import { UrlParser } from '../../utils/url'\r\nimport { WebmasterRoute } from '../route'\r\nimport type { Engine } from '../../core/engine'\r\n\r\nexport type WebmasterVideoIsActive =\r\n{\r\n    active: {\r\n        video_id: string\r\n        is_active: '1' | '0'\r\n    }\r\n} | {\r\n    code: string // '2002' stands for \"No video with this ID.\"\r\n    message: string\r\n    example: string\r\n}\r\n\r\nexport async function video_is_active(engine: Engine, urlOrId: string): Promise<boolean> {\r\n    try {\r\n        const id = UrlParser.getVideoID(urlOrId)\r\n        const res = await engine.request.get(WebmasterRoute.isVideoActive(id))\r\n        const result = await res.json() as WebmasterVideoIsActive\r\n\r\n        if ('code' in result) throw new Error(result.message)\r\n\r\n        return result.active.is_active === '1'\r\n    }\r\n    catch (err) {\r\n        console.error(err)\r\n        return false\r\n    }\r\n}\r\n","import { categories, deleted, search, stars, stars_detailed, tags, video_by_id, video_embed_code, video_is_active } from '../apis/webmaster'\r\nimport type { Engine } from './engine'\r\nimport type { LowerLetter, ThumbSize, WebmasterSearchOptions } from '../types'\r\n\r\nexport class WebMaster {\r\n    constructor(private engine: Engine) {\r\n    }\r\n\r\n    /**\r\n     * Search video by keyword\r\n     * @url https://www.pornhub.com/webmasters/search?search=keyword\r\n     * @example\r\n     * const results = await pornhub.webMaster.search('keyword', { page: 2, period: 'weekly' })\r\n     */\r\n    search(keyword: string, options: WebmasterSearchOptions = {}) {\r\n        return search(this.engine, keyword, options)\r\n    }\r\n\r\n    /**\r\n     * Get video information by url/id\r\n     * @url https://www.pornhub.com/webmasters/video_by_id?id={ID}&thumbsize=large\r\n     * @param urlOrId Video ID or page url\r\n     * @param thumbsize Thumbnail photo size\r\n     * @example\r\n     * const video = await pornhub.webMaster.getVideo('ph5a9634c9a827e')\r\n     */\r\n    getVideo(urlOrId: string, thumbsize?: ThumbSize) {\r\n        return video_by_id(this.engine, urlOrId, thumbsize)\r\n    }\r\n\r\n    /**\r\n     * Get video active status by url/id (deleted video will be false)\r\n     * @url https://www.pornhub.com/webmasters/is_video_active?id={ID}\r\n     * @param urlOrId Video ID or page url\r\n     * @example\r\n     * const isActive = await pornhub.webMaster.isVideoActive('ph5a9634c9a827e')\r\n     */\r\n    isVideoActive(urlOrId: string) {\r\n        return video_is_active(this.engine, urlOrId)\r\n    }\r\n\r\n    /**\r\n     * Get embed HTML code by video url/id\r\n     * @url https://www.pornhub.com/webmasters/video_embed_code?id=ID\r\n     * @param urlOrId Video ID or page url\r\n     * @example\r\n     * const code = await pornhub.webMaster.getVideoEmbedCode('ph5a9634c9a827e')\r\n     * // <iframe src=\"https://www.pornhub.com/embed/xxxxxx\" frameborder=\"0\" width=\"560\" height=\"340\" scrolling=\"no\" allowfullscreen></iframe>\r\n     */\r\n    getVideoEmbedCode(urlOrId: string) {\r\n        return video_embed_code(this.engine, urlOrId)\r\n    }\r\n\r\n    /**\r\n     * Get deleted video list by page\r\n     * @url https://www.pornhub.com/webmasters/deleted_videos?page=1\r\n     * @param page Page number, default: 1\r\n     * @example\r\n     * const deletedVideos = await pornhub.webMaster.getDeletedVideos(2)\r\n     */\r\n    getDeletedVideos(page = 1) {\r\n        return deleted(this.engine, page)\r\n    }\r\n\r\n    /**\r\n     * Query tag list by the first letter of tag name\r\n     * @url https://www.pornhub.com/webmasters/tags?list=a\r\n     * @param letter First letter of tag name. Default: 'a'. Range: a-z.\r\n     * @example\r\n     * const tags = await pornhub.webMaster.getTags('s')\r\n     * // ['solo', 'squirting', 'stockings', ...]\r\n     */\r\n    getTags(letter: LowerLetter = 'a') {\r\n        return tags(this.engine, letter)\r\n    }\r\n\r\n    /**\r\n     * Get category list\r\n     * @url https://www.pornhub.com/webmasters/categories\r\n     * @example\r\n     * const categories = await pornhub.webMaster.getCategories()\r\n     * // [{ id: \"65\", category: \"threesome\" }, { id: \"105\", category: \"60fps\" }]\r\n     */\r\n    getCategories() {\r\n        return categories(this.engine)\r\n    }\r\n\r\n    /**\r\n     * Get pornstar name list\r\n     * @url https://www.pornhub.com/webmasters/stars\r\n     * @example\r\n     * const pornstars = await pornhub.webMaster.getPornstars()\r\n     */\r\n    getPornstars() {\r\n        return stars(this.engine)\r\n    }\r\n\r\n    /**\r\n     * Get pornstar detail list\r\n     * @url https://www.pornhub.com/webmasters/stars_detailed\r\n     * const pornstars = await pornhub.webMaster.getPornstarsDetail()\r\n     */\r\n    getPornstarsDetail() {\r\n        return stars_detailed(this.engine)\r\n    }\r\n}\r\n","import urlcat from 'urlcat'\r\nimport { Route } from '../../apis'\r\nimport { getAttribute, getCheerio, getDataAttribute } from '../../utils/cheerio'\r\nimport { BASE_URL } from '../../utils/constant'\r\nimport { parsePaging } from '../search/base'\r\nimport type { Engine } from '../../core/engine'\r\nimport type { Paging } from '../../types'\r\nimport type { PornstarListOptions } from '../../types/ListOptions'\r\nimport type { CheerioAPI } from 'cheerio'\r\n\r\nexport interface PornstarListResult {\r\n    name: string\r\n    url: string\r\n    views: string\r\n    videoNum: number\r\n    rank: number\r\n    photo: string\r\n    verified: boolean\r\n    awarded: boolean\r\n}\r\n\r\nexport async function pornstarList(engine: Engine, options: PornstarListOptions): Promise<{\r\n    data: PornstarListResult[]\r\n    paging: Paging\r\n}> {\r\n    const url = Route.pornstarList(options)\r\n    const res = await engine.request.get(url)\r\n    const html = await res.text()\r\n    const $ = getCheerio(html)\r\n\r\n    return {\r\n        data: parseResult($),\r\n        paging: parsePaging($),\r\n    }\r\n}\r\n\r\nfunction parseResult($: CheerioAPI) {\r\n    const list = $('#popularPornstars li.performerCard')\r\n    const result = list.map((_, el) => {\r\n        const item = $(el)\r\n\r\n        const name = item.find('.performerCardName').text().trim()\r\n        const path = getAttribute<string>(item.find('a.title'), 'href', '')\r\n        const url = urlcat(BASE_URL, path)\r\n        const views = item.find('.viewsNumber').text().replace('Views', '').trim() || '0'\r\n        const videoNum = Number.parseInt(item.find('.videosNumber').text().replace('Videos', '')) || 0\r\n        const rank = Number.parseInt(item.find('.rank_number').text()) || 0\r\n        const img = item.find('img')\r\n        const photo = getDataAttribute<string>(img, 'thumb_url', '')\r\n        const verified = item.find('.verifiedPornstar').length > 0\r\n        const awarded = item.find('.trophyPornStar').length > 0\r\n\r\n        return {\r\n            name,\r\n            url,\r\n            views,\r\n            videoNum,\r\n            rank,\r\n            photo,\r\n            verified,\r\n            awarded,\r\n        }\r\n    }).get()\r\n\r\n    return result\r\n}\r\n","import type { Counting, Paging } from '../../types'\r\nimport type { CheerioAPI } from 'cheerio'\r\n\r\nexport function parsePaging($: CheerioAPI): Paging {\r\n    const current = Number.parseInt($('li.page_current').text()) || 1\r\n    const nextPage = $('li.page_next')\r\n    const isEnd = !nextPage.length || nextPage.hasClass('disabled')\r\n    const maxPage = isEnd ? current : (Number.parseInt(nextPage.prev('li').text()) || 1)\r\n    return {\r\n        current,\r\n        maxPage,\r\n        isEnd,\r\n    }\r\n}\r\n\r\nexport function parseCounting($: CheerioAPI): Counting {\r\n    try {\r\n        const counterStr = $('.showingCounter').text()\r\n        const [, from = '0', to = '0', total = '0'] = /(\\d+)-(\\d+)\\sof\\s(\\d+)/.exec(counterStr) || []\r\n        return {\r\n            from: Number.parseInt(from),\r\n            to: Number.parseInt(to),\r\n            total: Number.parseInt(total),\r\n        }\r\n    }\r\n    catch (err) {\r\n        return {\r\n            from: 0,\r\n            to: 0,\r\n            total: 0,\r\n        }\r\n    }\r\n}\r\n","import urlcat from 'urlcat'\r\nimport { Route } from '../../apis'\r\nimport { getAttribute, getCheerio } from '../../utils/cheerio'\r\nimport { BASE_URL } from '../../utils/constant'\r\nimport { UrlParser } from '../../utils/url'\r\nimport { nonNullable } from '../../utils/utils'\r\nimport { parseCounting, parsePaging } from './base'\r\nimport type { Engine } from '../../core/engine'\r\nimport type { Counting, Paging, VideoSearchOptions } from '../../types'\r\nimport type { Cheerio, CheerioAPI, Element } from 'cheerio'\r\n\r\nexport interface VideoListResult {\r\n    title: string\r\n    id: string\r\n    url: string\r\n    views: string\r\n    duration: string\r\n    /** @deprecated This is no longer valid in pornhub's new version. We don't have a way to tell */\r\n    hd: boolean\r\n    /** @deprecated This is no longer valid in pornhub's new version, use `freePremium` instead */\r\n    premium: boolean\r\n    freePremium: boolean\r\n    preview: string\r\n}\r\n\r\nexport type VideoSearchResult = VideoListResult\r\n\r\nexport async function videoSearch(engine: Engine, keyword: string, options: VideoSearchOptions): Promise<{\r\n    data: VideoSearchResult[]\r\n    paging: Paging\r\n    counting: Counting\r\n}> {\r\n    const url = Route.videoSearch(keyword, options)\r\n    const res = await engine.request.get(url)\r\n    const html = await res.text()\r\n    const $ = getCheerio(html)\r\n\r\n    return {\r\n        data: parseVideoResult($, '#videoSearchResult'),\r\n        paging: parsePaging($),\r\n        counting: parseCounting($),\r\n    }\r\n}\r\n\r\nexport function parseVideoResult($: CheerioAPI, container: string | Cheerio<Element>) {\r\n    const list = typeof container === 'string' ? $(`${container} li.videoBox`) : container.find('li.videoBox')\r\n\r\n    const result = list.map((_, el) => {\r\n        const item = $(el)\r\n        const thumb = item.find('.linkVideoThumb').eq(0)\r\n        const title = getAttribute<string>(thumb, 'title', '')\r\n        const path = getAttribute<string>(thumb, 'href', '')\r\n        // premium videos have no path\r\n        if (path === 'javascript:void(0)') return null\r\n\r\n        const url = urlcat(BASE_URL, path)\r\n        const id = UrlParser.getVideoID(url)\r\n        const img = item.find('img')\r\n        const preview = getAttribute<string>(img, 'src', '')\r\n\r\n        return {\r\n            title,\r\n            id,\r\n            url,\r\n            views: item.find('.videoDetailsBlock .views var').text(),\r\n            duration: item.find('.duration').text(),\r\n            hd: !!item.find('.hd-thumbnail').length,\r\n            premium: !!item.find('.premiumIcon').length,\r\n            freePremium: !!item.find('.marker-overlays .phpFreeBlock').length,\r\n            preview,\r\n        }\r\n    }).get().filter(nonNullable)\r\n\r\n    return result\r\n}\r\n","export function nonNullable<T>(x: T): x is NonNullable<T> {\r\n    return x != null\r\n}\r\n\r\nexport function unescape(str: string) {\r\n    if (typeof str !== 'string') return null\r\n\r\n    return str.replace(/\\\\/g, '')\r\n        .replace(/%2C/g, ',')\r\n        .replace(/%5B/g, '[')\r\n        .replace(/%5D/g, ']')\r\n        .replace(/&amp;/g, '&')\r\n}\r\n\r\n// https://ci.phncdn.com/pics/pornstars/000/002/190/(m=lciuhScOb_c)(mh=y8jot66fDRXSMiYW)thumb_00000.jpg\r\n// => https://ci.phncdn.com/pics/pornstars/000/002/190/thumb_00000.jpg\r\nexport const removeProtectionBracket = (str: string) => str.replace(/\\(.+?\\)/g, '')\r\n","import { Route } from '../../apis'\r\nimport { getCheerio } from '../../utils/cheerio'\r\nimport { parseCounting, parsePaging } from '../search/base'\r\nimport { parseVideoResult } from '../search/video'\r\nimport type { Engine } from '../../core/engine'\r\nimport type { Counting, Paging } from '../../types'\r\nimport type { VideoListOptions } from '../../types/ListOptions'\r\nimport type { VideoListResult } from '../search/video'\r\n\r\nexport async function videoList(engine: Engine, options: VideoListOptions): Promise<{\r\n    data: VideoListResult[]\r\n    paging: Paging\r\n    counting: Counting\r\n}> {\r\n    const url = Route.videoList(options)\r\n    const res = await engine.request.get(url)\r\n    const html = await res.text()\r\n    const $ = getCheerio(html)\r\n\r\n    return {\r\n        data: parseVideoResult($, '#videoCategory'),\r\n        paging: parsePaging($),\r\n        counting: parseCounting($),\r\n    }\r\n}\r\n","import { Route } from '../../apis'\r\nimport { getAttribute, getCheerio, getDataAttribute } from '../../utils/cheerio'\r\nimport { BASE_URL } from '../../utils/constant'\r\nimport { UrlParser } from '../../utils/url'\r\nimport type { Engine } from '../../core/engine'\r\nimport type { CheerioAPI } from 'cheerio'\r\n\r\nexport interface AlbumPage {\r\n    title: string\r\n    photos: Array<{\r\n        url: string\r\n        views: string\r\n        rating: string\r\n        preview: string\r\n    }>\r\n    provider: {\r\n        id: string\r\n        username: string\r\n        url: string\r\n    }\r\n    tags: string[]\r\n}\r\n\r\nexport async function albumPage(engine: Engine, urlOrId: string): Promise<AlbumPage> {\r\n    const id = UrlParser.getAlbumID(urlOrId)\r\n    const url = Route.albumPage(id)\r\n    const res = await engine.request.get(url)\r\n    const html = await res.text()\r\n    const $ = getCheerio(html)\r\n\r\n    return {\r\n        title: $('h1.photoAlbumTitleV2').text().trim(),\r\n        photos: parsePhotos($),\r\n        provider: parseProvider($),\r\n        tags: parseTag($),\r\n    }\r\n}\r\n\r\nfunction parsePhotos($: CheerioAPI) {\r\n    const $list = $('ul.photosAlbumsListing li.photoAlbumListContainer div.photoAlbumListBlock')\r\n    const photos = $list.map((_, el) => {\r\n        const item = $(el)\r\n        const url = `${BASE_URL}${item.find('a').attr('href')}` || ''\r\n        const views = item.find('.album-views').text().replace('Views: ', '').trim()\r\n        const rating = item.find('.album-rating').text()\r\n        const preview = getDataAttribute<string>(item, 'bkg', '')\r\n        return { url, views, rating, preview }\r\n    }).get()\r\n\r\n    return photos\r\n}\r\n\r\nfunction parseProvider($: CheerioAPI) {\r\n    const $user = $('div.pfileInfoBox div.usernameWrap')\r\n\r\n    const id = getDataAttribute<string>($user, 'userid', '')\r\n    const username = $user.find('a').text()\r\n    const url = getAttribute<string>($user.find('a'), 'href', '')\r\n\r\n    return { id, username, url }\r\n}\r\n\r\nfunction parseTag($: CheerioAPI) {\r\n    const $list = $('div.tagContainer > a')\r\n    return $list.map((_, el) => $(el).text().trim()).get()\r\n}\r\n","export function parseReadableNumber(viewsText: string): number {\r\n    if (!viewsText) return 0\r\n\r\n    const views = viewsText.replace(/,/g, '')\r\n    if (views.includes('K')) {\r\n        return Number.parseFloat(views) * 1000\r\n    }\r\n    else if (views.includes('M')) {\r\n        return Number.parseFloat(views) * 1000000\r\n    }\r\n    else if (views.includes('B')) {\r\n        return Number.parseFloat(views) * 1000000000\r\n    }\r\n    else {\r\n        return Number.parseFloat(views)\r\n    }\r\n}\r\n","import { Route } from '../../apis'\r\nimport { getAttribute, getCheerio, getDataAttribute } from '../../utils/cheerio'\r\nimport { parseReadableNumber } from '../../utils/number'\r\nimport { UrlParser } from '../../utils/url'\r\nimport { parseCounting, parsePaging } from '../search/base'\r\nimport { parseVideoResult } from '../search/video'\r\nimport type { Engine } from '../../core/engine'\r\nimport type { Counting, Paging } from '../../types'\r\nimport type { ModelVideoListOptions } from '../../types/ListOptions'\r\nimport type { VideoListResult } from '../search/video'\r\nimport type { CheerioAPI } from 'cheerio'\r\n\r\nexport interface ModelPage {\r\n    name: string\r\n    about: string\r\n    bio: string\r\n    avatar: string\r\n    cover: string\r\n    rank: number\r\n    verified: boolean\r\n    awarded: boolean\r\n    premium: boolean\r\n    subscribers: number\r\n    featuredIn: Array<{ name: string; url: string }>\r\n\r\n    uploadedVideoCount: number\r\n    taggedVideoCount: number\r\n\r\n    gender?: string\r\n    born?: string\r\n    birthPlace?: string\r\n    starSign?: string\r\n    measurements?: string\r\n    endowment?: string\r\n    relationship?: 'Open' | 'Taken' | 'Single' | (string & {})\r\n    interestedIn?: string\r\n    cityAndCountry?: string\r\n    careerStatus?: string\r\n    careerStartAndEnd?: string\r\n    height?: string\r\n    weight?: string\r\n    ethnicity?: string\r\n    background?: string\r\n    hairColor?: string\r\n    eyeColor?: string\r\n    fakeBoobs?: string\r\n    tattoos?: string\r\n    piercings?: string\r\n    interests?: string\r\n    videoWatched?: number\r\n    turnOns?: string\r\n    turnOffs?: string\r\n    videoViews?: number\r\n    profileViews?: number\r\n\r\n    socials: {\r\n        website?: string\r\n        twitter?: string\r\n        instagram?: string\r\n        snapchat?: string\r\n        modelhub?: string\r\n        amazonWishList?: string\r\n    }\r\n\r\n    mostRecentVideos: VideoListResult[]\r\n}\r\n\r\nconst defaultMapper = (value: string) => value\r\nconst yesNoMapper = (value: string) => value === 'Yes'\r\nconst stripeSpaceMapper = (value: string) => value.split(/\\s+/).join(' ')\r\nconst numberMapper = (value: string) => parseReadableNumber(value)\r\nconst DefaultMapper = {\r\n    key: defaultMapper,\r\n    value: defaultMapper,\r\n}\r\nconst KeyMapper: Record<string, {\r\n    key: (key: string) => keyof ModelPage\r\n    value: (value: string) => string | boolean | number\r\n}> = {\r\n    'Relationship status': {\r\n        key: () => 'relationship',\r\n        value: defaultMapper,\r\n    },\r\n    'Interested in': {\r\n        key: () => 'interestedIn',\r\n        value: defaultMapper,\r\n    },\r\n    'Gender': {\r\n        key: () => 'gender',\r\n        value: defaultMapper,\r\n    },\r\n    'Height': {\r\n        key: () => 'height',\r\n        value: defaultMapper,\r\n    },\r\n    'Weight': {\r\n        key: () => 'weight',\r\n        value: defaultMapper,\r\n    },\r\n    'Ethnicity': {\r\n        key: () => 'ethnicity',\r\n        value: defaultMapper,\r\n    },\r\n    'Background': {\r\n        key: () => 'background',\r\n        value: defaultMapper,\r\n    },\r\n    'Hair Color': {\r\n        key: () => 'hairColor',\r\n        value: defaultMapper,\r\n    },\r\n    'Eye Color': {\r\n        key: () => 'eyeColor',\r\n        value: defaultMapper,\r\n    },\r\n    'Fake Boobs': {\r\n        key: () => 'fakeBoobs',\r\n        value: yesNoMapper,\r\n    },\r\n    'Tattoos': {\r\n        key: () => 'tattoos',\r\n        value: yesNoMapper,\r\n    },\r\n    'Piercings': {\r\n        key: () => 'piercings',\r\n        value: yesNoMapper,\r\n    },\r\n    'Video Views': {\r\n        key: () => 'videoViews',\r\n        value: numberMapper,\r\n    },\r\n    'Profile Views': {\r\n        key: () => 'profileViews',\r\n        value: numberMapper,\r\n    },\r\n    'Videos Watched': {\r\n        key: () => 'videoWatched',\r\n        value: numberMapper,\r\n    },\r\n    'Turn Ons': {\r\n        key: () => 'turnOns',\r\n        value: defaultMapper,\r\n    },\r\n    'Turn Offs': {\r\n        key: () => 'turnOffs',\r\n        value: defaultMapper,\r\n    },\r\n    'Interests and hobbies': {\r\n        key: () => 'interests',\r\n        value: defaultMapper,\r\n    },\r\n    'Born': {\r\n        key: () => 'born',\r\n        value: defaultMapper,\r\n    },\r\n    'Birth Place': {\r\n        key: () => 'birthPlace',\r\n        value: defaultMapper,\r\n    },\r\n    'Birthplace': {\r\n        key: () => 'birthPlace',\r\n        value: defaultMapper,\r\n    },\r\n    'Star Sign': {\r\n        key: () => 'starSign',\r\n        value: defaultMapper,\r\n\r\n    },\r\n    'Measurements': {\r\n        key: () => 'measurements',\r\n        value: defaultMapper,\r\n    },\r\n    'City and Country': {\r\n        key: () => 'cityAndCountry',\r\n        value: defaultMapper,\r\n    },\r\n    'Endowment': {\r\n        key: () => 'endowment',\r\n        value: defaultMapper,\r\n    },\r\n    'Career Status': {\r\n        key: () => 'careerStatus',\r\n        value: defaultMapper,\r\n    },\r\n    'Career Start and End': {\r\n        key: () => 'careerStartAndEnd',\r\n        value: stripeSpaceMapper,\r\n    },\r\n}\r\n\r\nconst parseVideoCount = (text: string) => {\r\n    // \"Showing 1-XX of YY\"\r\n    if (!text) return 0\r\n\r\n    const match = text.match(/Showing \\d+-\\d+ of (\\d+)/)\r\n    if (match) return parseReadableNumber(match[1])\r\n\r\n    return 0\r\n}\r\n\r\nexport async function modelPage(engine: Engine, urlOrName: string): Promise<ModelPage> {\r\n    const name = UrlParser.getModelName(urlOrName)\r\n    if (!name) throw new Error(`Invalid model input: ${urlOrName}`)\r\n\r\n    const url = Route.modelPage(name)\r\n    const res = await engine.request.get(url)\r\n    const html = await res.text()\r\n    const $ = getCheerio(html)\r\n\r\n    return parseInfo($)\r\n}\r\n\r\nexport async function modelUploadedVideos(engine: Engine, urlOrName: string, options: ModelVideoListOptions): Promise<{\r\n    data: VideoListResult[]\r\n    paging: Paging\r\n    counting: Counting\r\n}> {\r\n    const name = UrlParser.getModelName(urlOrName)\r\n    if (!name) throw new Error(`Invalid model input: ${urlOrName}`)\r\n\r\n    const url = Route.modelVideosPage(name, options.page ?? 1)\r\n    const res = await engine.request.get(url)\r\n    const html = await res.text()\r\n    const $ = getCheerio(html)\r\n\r\n    return {\r\n        data: parseVideoResult($, '.videoUList'),\r\n        paging: parsePaging($),\r\n        counting: parseCounting($),\r\n    }\r\n}\r\n\r\nfunction parseInfo($: CheerioAPI): ModelPage {\r\n    const infoPieces = $('div.infoPiece').toArray()\r\n    const info = Object.fromEntries(infoPieces.map((el) => {\r\n        const item = $(el)\r\n        const key = item.find('span:nth-child(1)').text().trim().replace(':', '')\r\n        const value = item.find('span:nth-child(2)').text().trim()\r\n            || item.text().replace(item.find('span:nth-child(1)').text(), '').trim()\r\n        const mapper = KeyMapper[key] || DefaultMapper\r\n        return [mapper.key(key), mapper.value(value)]\r\n    }))\r\n\r\n    const name = $('.nameSubscribe > .name').text().trim()\r\n\r\n    const rankEl = $('div.rankingInfo > .infoBox > span')\r\n    const rank = parseReadableNumber(rankEl.text().trim())\r\n\r\n    const avatarEl = $('img#getAvatar, .topProfileHeader > .thumbImage > img')\r\n    const avatar = getAttribute<string>(avatarEl, 'src', '')\r\n\r\n    const coverEl = $('img#coverPictureDefault, .topProfileHeader > .coverImage > img')\r\n    const cover = getAttribute<string>(coverEl, 'src', '')\r\n\r\n    const aboutEl = $('section.aboutMeSection > div:nth-child(2)')\r\n    const about = aboutEl.text().trim()\r\n\r\n    const bioEl = $('.biographyText .content div[itemprop=\"description\"], .bio:not(:has(.aboutMeSection)) > .text')\r\n    const bio = stripeSpaceMapper(bioEl.text().trim())\r\n\r\n    const verifiedEl = $('.badge-username > .verifiedPornstar')\r\n    const verified = !!verifiedEl.length\r\n\r\n    const awardEl = $('.badge-username > .trophyPornStar')\r\n    const awarded = !!awardEl.length\r\n\r\n    const premiumEl = $('.badge-username > .premium-icon')\r\n    const premium = !!premiumEl.length\r\n\r\n    const subscribersEl = $('div.tooltipTrig.infoBox[data-title^=\"Subscribers:\"]')\r\n    const subscribersText = getDataAttribute<string>(subscribersEl, 'title', '')\r\n        .replace('Subscribers: ', '')\r\n    const subscribersText2 = $('div.infoBox:has(.title:contains(\"Subscribers\")) > span').text().trim()\r\n    const subscribers = parseReadableNumber(subscribersText) || parseReadableNumber(subscribersText2)\r\n\r\n    const featuredIn = $('div.featuredIn > a')\r\n        .toArray()\r\n        .map((el) => {\r\n            const item = $(el)\r\n            const name = item.text().trim()\r\n            const url = getAttribute<string>(item, 'href', '')\r\n            return { name, url }\r\n        })\r\n        .filter(item => item.name && item.url)\r\n\r\n    let uploadedVideoCount = 0\r\n    const taggedVideoCount = 0\r\n    if (verified) {\r\n        const recentVideoCountEl = $('.mostRecentPornstarVideos > .pornstarVideosCounter')\r\n        uploadedVideoCount = parseVideoCount(recentVideoCountEl.text().trim())\r\n\r\n        // looks like model page doesn't have tagged video count\r\n    }\r\n    else {\r\n        // there is no unverified model :D\r\n    }\r\n\r\n    const socials = {\r\n        website: getAttribute<string>($('.socialList a:has(.officialSiteIcon)'), 'href'),\r\n        twitter: getAttribute<string>($('.socialList a:has(.ph-icon-twitterX)'), 'href'),\r\n        instagram: getAttribute<string>($('.socialList a:has(.instagramIcon)'), 'href'),\r\n        snapchat: getAttribute<string>($('.socialList a:has(.snapchatIcon)'), 'href'),\r\n        modelhub: getAttribute<string>($('.socialList a:has(.modelhubIcon)'), 'href'),\r\n        amazonWishList: getAttribute<string>($('.socialList a:has(.amazonWishlistIcon)'), 'href')\r\n            || getAttribute<string>($('.socialList a:has(.amazonWLIcon)'), 'href'),\r\n    }\r\n\r\n    const mostRecentVideos = parseVideoResult($, '.mostRecentPornstarVideos')\r\n\r\n    return {\r\n        name,\r\n        about,\r\n        bio,\r\n        avatar,\r\n        cover,\r\n        rank,\r\n        verified,\r\n        awarded,\r\n        premium,\r\n        subscribers,\r\n        featuredIn,\r\n        uploadedVideoCount,\r\n        taggedVideoCount,\r\n        ...info,\r\n        socials,\r\n        mostRecentVideos,\r\n    } as ModelPage\r\n}\r\n","import { Route } from '../../apis'\r\nimport { getCheerio } from '../../utils/cheerio'\r\nimport { UrlParser } from '../../utils/url'\r\nimport type { Engine } from '../../core/engine'\r\nimport type { CheerioAPI } from 'cheerio'\r\n\r\nexport interface PhotoPage {\r\n    info: {\r\n        title: string\r\n        views: number\r\n        rating: string\r\n        albumID: string\r\n        url: string\r\n    }\r\n    provider: {\r\n        id: number\r\n        username: string\r\n        url: string\r\n    }\r\n    tags: string[]\r\n}\r\n\r\nexport async function photoPage(engine: Engine, urlOrId: string): Promise<PhotoPage> {\r\n    const id = UrlParser.getPhotoID(urlOrId)\r\n    const url = Route.photoPage(id)\r\n    const res = await engine.request.get(url)\r\n    const html = await res.text()\r\n    const $ = getCheerio(html)\r\n\r\n    return {\r\n        info: parsePhoto($),\r\n        provider: parseProvider($),\r\n        tags: parseTag($),\r\n    }\r\n}\r\n\r\nfunction parsePhoto($: CheerioAPI) {\r\n    const photoWrapper = $('div#photoWrapper')\r\n    const $img = photoWrapper.find('img')\r\n    const title = $img.attr('alt') || ''\r\n    const url = $img.attr('src') || ''\r\n    const albumID = photoWrapper.data('album-id')?.toString() || ''\r\n    const rating = `${photoWrapper.find('span#votePercentageNumber').text()}%` || ''\r\n\r\n    const viewsText = photoWrapper.find('section#photoInfoSection strong').text()\r\n    const views = Number.parseInt(removeComma(viewsText)) || 0\r\n\r\n    return {\r\n        title,\r\n        views,\r\n        rating,\r\n        albumID,\r\n        url,\r\n    }\r\n}\r\n\r\nfunction parseProvider($: CheerioAPI) {\r\n    const $user = $('div#userInformation div.usernameWrap')\r\n\r\n    const id = $user.data('userid') as number\r\n    const username = $user.find('a').text()\r\n    const url = $user.find('a').attr('href') || ''\r\n\r\n    return { id, username, url }\r\n}\r\n\r\nfunction parseTag($: CheerioAPI) {\r\n    const $list = $('ul.tagList a.tagText')\r\n    return $list.map(idx => $list.eq(idx).text()).get()\r\n}\r\n\r\nfunction removeComma(str: string) {\r\n    return str.replace(/,/g, '')\r\n}\r\n","import { Route } from '../../apis'\r\nimport { getAttribute, getCheerio, getDataAttribute } from '../../utils/cheerio'\r\nimport { parseReadableNumber } from '../../utils/number'\r\nimport { UrlParser } from '../../utils/url'\r\nimport { type VideoListResult, parseVideoResult } from '../search/video'\r\nimport type { Engine } from '../../core/engine'\r\nimport type { Cheerio, CheerioAPI, Element } from 'cheerio'\r\n\r\nexport interface PornstarPage {\r\n    name: string\r\n    about: string\r\n    bio: string\r\n    avatar: string\r\n    cover: string\r\n    rank: number\r\n    verified: boolean\r\n    awarded: boolean\r\n    premium: boolean\r\n    subscribers: number\r\n    featuredIn: Array<{ name: string; url: string }>\r\n\r\n    uploadedVideoCount: number\r\n    taggedVideoCount: number\r\n\r\n    gender?: string\r\n    born?: string\r\n    birthPlace?: string\r\n    starSign?: string\r\n    measurements?: string\r\n    endowment?: string\r\n    relationship?: 'Open' | 'Taken' | 'Single' | (string & {})\r\n    interestedIn?: string\r\n    cityAndCountry?: string\r\n    pornstarProfileViews?: number\r\n    careerStatus?: string\r\n    careerStartAndEnd?: string\r\n    height?: string\r\n    weight?: string\r\n    ethnicity?: string\r\n    background?: string\r\n    hairColor?: string\r\n    eyeColor?: string\r\n    fakeBoobs?: string\r\n    tattoos?: string\r\n    piercings?: string\r\n    interests?: string\r\n    videoWatched?: number\r\n    turnOns?: string\r\n    turnOffs?: string\r\n    videoViews?: number\r\n    profileViews?: number\r\n\r\n    socials: {\r\n        website?: string\r\n        twitter?: string\r\n        instagram?: string\r\n        snapchat?: string\r\n        modelhub?: string\r\n        amazonWishList?: string\r\n    }\r\n\r\n    mostRecentVideos: VideoListResult[]\r\n    uploadedVideos: VideoListResult[]\r\n}\r\n\r\nconst defaultMapper = (value: string) => value\r\nconst yesNoMapper = (value: string) => value === 'Yes'\r\nconst stripeSpaceMapper = (value: string) => value.split(/\\s+/).join(' ')\r\nconst numberMapper = (value: string) => parseReadableNumber(value)\r\nconst DefaultMapper = {\r\n    key: defaultMapper,\r\n    value: defaultMapper,\r\n}\r\nconst KeyMapper: Record<string, {\r\n    key: (key: string) => keyof PornstarPage\r\n    value: (value: string) => string | boolean | number\r\n}> = {\r\n    'Relationship status': {\r\n        key: () => 'relationship',\r\n        value: defaultMapper,\r\n    },\r\n    'Interested in': {\r\n        key: () => 'interestedIn',\r\n        value: defaultMapper,\r\n    },\r\n    'Gender': {\r\n        key: () => 'gender',\r\n        value: defaultMapper,\r\n    },\r\n    'Height': {\r\n        key: () => 'height',\r\n        value: defaultMapper,\r\n    },\r\n    'Weight': {\r\n        key: () => 'weight',\r\n        value: defaultMapper,\r\n    },\r\n    'Ethnicity': {\r\n        key: () => 'ethnicity',\r\n        value: defaultMapper,\r\n    },\r\n    'Background': {\r\n        key: () => 'background',\r\n        value: defaultMapper,\r\n    },\r\n    'Hair Color': {\r\n        key: () => 'hairColor',\r\n        value: defaultMapper,\r\n    },\r\n    'Eye Color': {\r\n        key: () => 'eyeColor',\r\n        value: defaultMapper,\r\n    },\r\n    'Fake Boobs': {\r\n        key: () => 'fakeBoobs',\r\n        value: yesNoMapper,\r\n    },\r\n    'Tattoos': {\r\n        key: () => 'tattoos',\r\n        value: yesNoMapper,\r\n    },\r\n    'Piercings': {\r\n        key: () => 'piercings',\r\n        value: yesNoMapper,\r\n    },\r\n    'Video Views': {\r\n        key: () => 'videoViews',\r\n        value: numberMapper,\r\n    },\r\n    'Profile Views': {\r\n        key: () => 'profileViews',\r\n        value: numberMapper,\r\n    },\r\n    'Pornstar Profile Views': {\r\n        key: () => 'pornstarProfileViews',\r\n        value: numberMapper,\r\n    },\r\n    'Videos Watched': {\r\n        key: () => 'videoWatched',\r\n        value: numberMapper,\r\n    },\r\n    'Turn Ons': {\r\n        key: () => 'turnOns',\r\n        value: defaultMapper,\r\n    },\r\n    'Turn Offs': {\r\n        key: () => 'turnOffs',\r\n        value: defaultMapper,\r\n    },\r\n    'Interests and hobbies': {\r\n        key: () => 'interests',\r\n        value: defaultMapper,\r\n    },\r\n    'Born': {\r\n        key: () => 'born',\r\n        value: defaultMapper,\r\n    },\r\n    'Birth Place': {\r\n        key: () => 'birthPlace',\r\n        value: defaultMapper,\r\n    },\r\n    'Birthplace': {\r\n        key: () => 'birthPlace',\r\n        value: defaultMapper,\r\n    },\r\n    'Star Sign': {\r\n        key: () => 'starSign',\r\n        value: defaultMapper,\r\n    },\r\n    'Measurements': {\r\n        key: () => 'measurements',\r\n        value: defaultMapper,\r\n    },\r\n    'City and Country': {\r\n        key: () => 'cityAndCountry',\r\n        value: defaultMapper,\r\n    },\r\n    'Endowment': {\r\n        key: () => 'endowment',\r\n        value: defaultMapper,\r\n    },\r\n    'Career Status': {\r\n        key: () => 'careerStatus',\r\n        value: defaultMapper,\r\n    },\r\n    'Career Start and End': {\r\n        key: () => 'careerStartAndEnd',\r\n        value: stripeSpaceMapper,\r\n    },\r\n}\r\n\r\nconst parseVideoCount = (text: string) => {\r\n    // \"Showing 1-XX of YY\"\r\n    if (!text) return 0\r\n\r\n    const match = text.match(/Showing \\d+-\\d+ of (\\d+)/)\r\n    if (match) return parseReadableNumber(match[1])\r\n\r\n    return 0\r\n}\r\n\r\nexport async function pornstarPage(engine: Engine, urlOrName: string): Promise<PornstarPage> {\r\n    const name = UrlParser.getPornstarName(urlOrName)\r\n    if (!name) throw new Error(`Invalid pornstar input: ${urlOrName}`)\r\n\r\n    const url = Route.pornstarPage(name)\r\n    const res = await engine.request.get(url)\r\n    const html = await res.text()\r\n    const $ = getCheerio(html)\r\n\r\n    return parseInfo($)\r\n}\r\n\r\nfunction parseInfo($: CheerioAPI): PornstarPage {\r\n    const infoPieces = $('div.infoPiece').toArray()\r\n    const info = Object.fromEntries(infoPieces.map((el) => {\r\n        const item = $(el)\r\n        const key = item.find('span:nth-child(1)').text().trim().replace(':', '')\r\n        const value = item.find('span:nth-child(2)').text().trim()\r\n            || item.text().replace(item.find('span:nth-child(1)').text(), '').trim()\r\n        const mapper = KeyMapper[key] || DefaultMapper\r\n        return [mapper.key(key), mapper.value(value)]\r\n    }))\r\n\r\n    const name = $('.nameSubscribe > .name').text().trim()\r\n\r\n    const rankEl = $('div.rankingInfo > .infoBox > span')\r\n    const rank = parseReadableNumber(rankEl.text().trim())\r\n\r\n    const avatarEl = $('img#getAvatar, .topProfileHeader > .thumbImage > img')\r\n    const avatar = getAttribute<string>(avatarEl, 'src', '')\r\n\r\n    const coverEl = $('img#coverPictureDefault, .topProfileHeader > .coverImage > img')\r\n    const cover = getAttribute<string>(coverEl, 'src', '')\r\n\r\n    const aboutEl = $('section.aboutMeSection > div:nth-child(2)')\r\n    const about = aboutEl.text().trim()\r\n\r\n    const bioEl = $('.biographyText .content div[itemprop=\"description\"], .bio:not(:has(.aboutMeSection)) > .text')\r\n    const bio = stripeSpaceMapper(bioEl.text().trim())\r\n\r\n    const verifiedEl = $('.badge-username > .verifiedPornstar')\r\n    const verified = !!verifiedEl.length\r\n\r\n    const awardEl = $('.badge-username > .trophyPornStar')\r\n    const awarded = !!awardEl.length\r\n\r\n    const premiumEl = $('.badge-username > .premium-icon')\r\n    const premium = !!premiumEl.length\r\n\r\n    const subscribersEl = $('div.tooltipTrig.infoBox[data-title^=\"Subscribers:\"]')\r\n    const subscribersText = getDataAttribute<string>(subscribersEl, 'title', '')\r\n        .replace('Subscribers: ', '')\r\n    const subscribersText2 = $('div.infoBox:has(.title:contains(\"Subscribers\")) > span').text().trim()\r\n    const subscribers = parseReadableNumber(subscribersText) || parseReadableNumber(subscribersText2)\r\n\r\n    const featuredIn = $('div.featuredIn > a')\r\n        .toArray()\r\n        .map((el) => {\r\n            const item = $(el)\r\n            const name = item.text().trim()\r\n            const url = getAttribute<string>(item, 'href', '')\r\n            return { name, url }\r\n        })\r\n        .filter(item => item.name && item.url)\r\n\r\n    let uploadedVideoEl: Cheerio<Element> | null = null\r\n    let taggedVideoEl: Cheerio<Element> | null = null\r\n    let uploadedVideoCount = 0\r\n    let taggedVideoCount = 0\r\n    if (verified) {\r\n        uploadedVideoEl = $('.pornstarUploadedVideos')\r\n        uploadedVideoCount = parseVideoCount(uploadedVideoEl.find('.pornstarVideosCounter').text().trim())\r\n\r\n        taggedVideoEl = $('.mostRecentPornstarVideos')\r\n        taggedVideoCount = parseVideoCount(taggedVideoEl.find('.pornstarVideosCounter').text().trim())\r\n    }\r\n    else {\r\n        const videoCounter = $('.pornstarVideosCounter').first()\r\n        if (videoCounter.length) {\r\n            const title = videoCounter.parent().find('.sectionTitle > h2').first().text().trim()\r\n            if (title.endsWith('Tagged Videos')) {\r\n                taggedVideoEl = videoCounter.parent()\r\n                taggedVideoCount = parseVideoCount(videoCounter.text().trim())\r\n            }\r\n\r\n            // non-verified pornstar are not allowed to upload videos\r\n            // uploadedVideoCount = 0\r\n        }\r\n    }\r\n\r\n    const socials = {\r\n        website: getAttribute<string>($('.socialList a:has(.officialSiteIcon)'), 'href'),\r\n        twitter: getAttribute<string>($('.socialList a:has(.ph-icon-twitterX)'), 'href'),\r\n        instagram: getAttribute<string>($('.socialList a:has(.instagramIcon)'), 'href'),\r\n        snapchat: getAttribute<string>($('.socialList a:has(.snapchatIcon)'), 'href'),\r\n        modelhub: getAttribute<string>($('.socialList a:has(.modelhubIcon)'), 'href'),\r\n        amazonWishList: getAttribute<string>($('.socialList a:has(.amazonWishlistIcon)'), 'href')\r\n            || getAttribute<string>($('.socialList a:has(.amazonWLIcon)'), 'href'),\r\n    }\r\n\r\n    const uploadedVideos = uploadedVideoEl ? parseVideoResult($, uploadedVideoEl) : []\r\n    const mostRecentVideos = taggedVideoEl ? parseVideoResult($, taggedVideoEl) : []\r\n\r\n    return {\r\n        name,\r\n        about,\r\n        bio,\r\n        avatar,\r\n        cover,\r\n        rank,\r\n        verified,\r\n        awarded,\r\n        premium,\r\n        subscribers,\r\n        featuredIn,\r\n        uploadedVideoCount,\r\n        taggedVideoCount,\r\n        ...info,\r\n        socials,\r\n        uploadedVideos,\r\n        mostRecentVideos,\r\n    } as PornstarPage\r\n}\r\n","export function toHHMMSS(sec: number) {\r\n    const hours = Math.floor(sec / 3600)\r\n    const minutes = Math.floor(sec / 60) % 60\r\n    const seconds = sec % 60\r\n\r\n    return [hours, minutes, seconds]\r\n        .map(v => v < 10 ? `0${v}` : v)\r\n        .filter((v, i) => v !== '00' || i > 0)\r\n        .join(':')\r\n}\r\n","import { Route } from '../../apis'\r\nimport { getAttribute, getCheerio, getDataAttribute } from '../../utils/cheerio'\r\nimport { parseReadableNumber } from '../../utils/number'\r\nimport { toHHMMSS } from '../../utils/time'\r\nimport { UrlParser } from '../../utils/url'\r\nimport type { Engine } from '../../core/engine'\r\nimport type { CheerioAPI } from 'cheerio'\r\n\r\nexport interface MediaDefinition {\r\n    defaultQuality: boolean | number\r\n    format: string\r\n    videoUrl: string\r\n    quality: number | number[]\r\n    remote: boolean\r\n}\r\n\r\nexport interface VideoPage {\r\n    id: string\r\n    url: string\r\n    title: string\r\n    views: number\r\n    vote: {\r\n        up: number\r\n        down: number\r\n        total: number\r\n        rating: number\r\n    }\r\n    premium: boolean\r\n    thumb: string\r\n    preview: string\r\n    /**\r\n     * @deprecated We no longer support video download. Use alternative tools such as `yt-dlp` instead.\r\n     */\r\n    videos: Array<{\r\n        url: string\r\n        quality: string\r\n        filename: string\r\n        extension: string\r\n    }>\r\n    mediaDefinitions: MediaDefinition[]\r\n    provider: {\r\n        username: string\r\n        url: string\r\n    } | null\r\n    /** video duration (in second) */\r\n    duration: number\r\n    /** video duration formatted in \"(HH:)mm:ss\". eg. \"32:09\", \"01:23:05\" */\r\n    durationFormatted: string\r\n    tags: string[]\r\n    pornstars: string[]\r\n    categories: string[]\r\n    uploadDate: Date\r\n}\r\n\r\nexport async function videoPage(engine: Engine, urlOrId: string): Promise<VideoPage> {\r\n    const id = UrlParser.getVideoID(urlOrId)\r\n    const url = Route.videoPage(id)\r\n    const res = await engine.request.get(url)\r\n    const html = await res.text()\r\n    const $ = getCheerio(html)\r\n\r\n    return {\r\n        id,\r\n        url,\r\n        mediaDefinitions: parseMediaDefinition(html),\r\n        ...parseByDom(html, $),\r\n    }\r\n}\r\n\r\nexport function parseByDom(html: string, $: CheerioAPI) {\r\n    const voteUp = parseReadableNumber($('span.votesUp').text() || '0')\r\n    const voteDown = parseReadableNumber($('span.votesDown').text() || '0')\r\n\r\n    const title = $('head > title').first().text().replace(' - Pornhub.com', '')\r\n    const viewsText = $('span.count').text() || '0'\r\n    const views = parseReadableNumber(viewsText)\r\n    const totalVote = voteUp + voteDown\r\n    const vote = {\r\n        up: voteUp,\r\n        down: voteDown,\r\n        total: totalVote,\r\n        rating: totalVote === 0 ? 0 : Math.round(voteUp / totalVote * 100) / 100,\r\n    }\r\n    const premium = $('#videoTitle .ph-icon-badge-premium').length !== 0\r\n    const thumb = getAttribute<string>($('.thumbnail img'), 'src', '')\r\n    const preview = getAttribute<string>($('head meta[property=\"og:image\"]'), 'content', '')\r\n\r\n    // wtf...is this double rel a coding bug from pornhub?\r\n    // <a rel=\"rel=\"nofollow\"\" href=\"/users/xxxx\"  class=\"bolded\">XXXXX</a>\r\n    const providerLink = $('.usernameBadgesWrapper a.bolded').first()\r\n    const provider = providerLink.length\r\n        ? { username: providerLink.text(), url: getAttribute<string>(providerLink, 'href', '') }\r\n        : null\r\n\r\n    const trafficJunkyMeta = $('head meta[name=adsbytrafficjunkycontext]')\r\n    const tags = getDataAttribute<string>(trafficJunkyMeta, 'context-tag')?.split(',') || []\r\n    const pornstars = getDataAttribute<string>(trafficJunkyMeta, 'context-pornstar')?.split(',') || []\r\n    const categories = getDataAttribute<string>(trafficJunkyMeta, 'context-category')?.split(',') || []\r\n\r\n    const durationMeta = $('head meta[property=\"video:duration\"]')\r\n    const duration = +getAttribute<number>(durationMeta, 'content', 0)\r\n    const durationFormatted = toHHMMSS(duration)\r\n\r\n    return {\r\n        title,\r\n        views,\r\n        vote,\r\n        premium,\r\n        thumb,\r\n        preview,\r\n        videos: [],\r\n        provider,\r\n        tags,\r\n        pornstars,\r\n        categories,\r\n        duration,\r\n        durationFormatted,\r\n        ...parseByLdJson($),\r\n    }\r\n}\r\n\r\nfunction parseByLdJson($: CheerioAPI) {\r\n    try {\r\n        const ldPlusJson = JSON.parse($('head script[type=\"application/ld+json\"]').first().text())\r\n        const uploadDate = new Date(ldPlusJson.uploadDate)\r\n        return {\r\n            uploadDate,\r\n        }\r\n    }\r\n    catch (error) {\r\n        console.error('Failed to parse ld+json', error)\r\n        return {\r\n            uploadDate: new Date(0),\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Handle '\"270\"' -> 270\r\n */\r\nfunction parseStringNumber(str: string): number {\r\n    return +str.replace(/\"/g, '')\r\n}\r\n\r\nconst mediaDefinitionRegex = /{\"defaultQuality\":(true|false|\\d+),\"format\":\"(\\w+)\",\"videoUrl\":\"(.+?)\",\"quality\":((\"\\d+\")|(\\[[\\d,]*\\]))(,\"remote\":(true|false))?}/g\r\nexport function parseMediaDefinition(html: string): MediaDefinition[] {\r\n    const mediaDefinitions: MediaDefinition[] = []\r\n\r\n    while (true) {\r\n        const match = mediaDefinitionRegex.exec(html)\r\n        if (!match) break\r\n\r\n        try {\r\n            const [, _defaultQuality, format, videoUrl, _quality, ,_qualityArray, , , _remote] = match\r\n            const defaultQuality = _defaultQuality === 'true'\r\n                ? true\r\n                : _defaultQuality === 'false'\r\n                    ? false\r\n                    : +_defaultQuality\r\n            const quality = _qualityArray ? JSON.parse(_qualityArray) as number[] : parseStringNumber(_quality)\r\n            const remote = _remote === 'true'\r\n\r\n            mediaDefinitions.push({\r\n                defaultQuality,\r\n                format,\r\n                videoUrl,\r\n                quality,\r\n                remote,\r\n            })\r\n        }\r\n        catch (error) {\r\n            console.warn(`Failed to parse media definition from input: \"${match}\"`)\r\n            console.warn(error)\r\n        }\r\n    }\r\n\r\n    return mediaDefinitions\r\n}\r\n","import { Route } from '../../apis'\r\nimport { getCheerio } from '../../utils/cheerio'\r\nimport { UrlParser } from '../../utils/url'\r\nimport { parseByDom, parseMediaDefinition } from './video'\r\nimport type { VideoPage } from './video'\r\nimport type { Engine } from '../../core/engine'\r\n\r\nexport async function randomPage(engine: Engine): Promise<VideoPage> {\r\n    const url = Route.randomPage()\r\n    const response = await engine.request.fetch(url, { follow: 3 })\r\n    const redirectUrl = response.url\r\n    const id = UrlParser.getVideoID(redirectUrl)\r\n    const html = await response.text()\r\n    const $ = getCheerio(html)\r\n\r\n    return {\r\n        id,\r\n        url: Route.videoPage(id),\r\n        mediaDefinitions: parseMediaDefinition(html),\r\n        ...parseByDom(html, $),\r\n    }\r\n}\r\n","import { Route } from '../../apis'\r\nimport { getCheerio } from '../../utils/cheerio'\r\nimport { parsePaging } from '../search/base'\r\nimport { parseVideoResult } from '../search/video'\r\nimport type { Engine } from '../../core/engine'\r\nimport type { Paging } from '../../types'\r\nimport type { RecommendedOptions } from '../../types/SearchOptions'\r\nimport type { VideoListResult } from '../search/video'\r\n\r\nexport async function recommended(engine: Engine, options: RecommendedOptions): Promise<{\r\n    data: VideoListResult[]\r\n    paging: Paging\r\n}> {\r\n    const url = Route.recommendedPage(options)\r\n    const res = await engine.request.get(url)\r\n    const html = await res.text()\r\n    const $ = getCheerio(html)\r\n\r\n    return {\r\n        data: parseVideoResult($, '.recommendedVideosContainer'),\r\n        paging: parsePaging($),\r\n    }\r\n}\r\n","import { Route } from '../../apis'\r\nimport { getAttribute, getCheerio, getDataAttribute } from '../../utils/cheerio'\r\nimport { BASE_URL } from '../../utils/constant'\r\nimport { parseCounting, parsePaging } from './base'\r\nimport type { Engine } from '../../core/engine'\r\nimport type { AlbumSearchOptions, Counting, Paging } from '../../types'\r\nimport type { CheerioAPI } from 'cheerio'\r\n\r\nexport interface AlbumSearchResult {\r\n    title: string\r\n    url: string\r\n    rating: string\r\n    preview: string\r\n}\r\n\r\nexport async function albumSearch(engine: Engine, keyword: string, options: AlbumSearchOptions): Promise<{\r\n    data: AlbumSearchResult[]\r\n    paging: Paging\r\n    counting: Counting\r\n}> {\r\n    const url = Route.albumSearch(keyword, options)\r\n    const res = await engine.request.get(url)\r\n    const html = await res.text()\r\n    const $ = getCheerio(html)\r\n\r\n    return {\r\n        data: parseResult($),\r\n        paging: parsePaging($),\r\n        counting: parseCounting($),\r\n    }\r\n}\r\n\r\nfunction parseResult($: CheerioAPI) {\r\n    const $list = $('ul#photosAlbumsSection li.photoAlbumListContainer div.photoAlbumListBlock')\r\n    const result = $list.map((_, el) => {\r\n        const item = $(el)\r\n\r\n        const title = getAttribute<string>(item, 'title', '')\r\n        const url = `${BASE_URL}${item.find('a').attr('href')}`\r\n        const rating = item.find('.album-photo-percentage').text()\r\n        const preview = getDataAttribute<string>(item, 'bkg')\r\n        || getAttribute<string>(item, 'style', '').match(/url\\(\"(.+)\"\\)/)?.[1]\r\n        || ''\r\n        return { title, url, rating, preview }\r\n    }).get()\r\n\r\n    return result\r\n}\r\n","import urlcat from 'urlcat'\r\nimport { Route } from '../../apis'\r\nimport { getAttribute, getCheerio, getDataAttribute } from '../../utils/cheerio'\r\nimport { BASE_URL } from '../../utils/constant'\r\nimport { removeProtectionBracket } from '../../utils/utils'\r\nimport { parseCounting, parsePaging } from './base'\r\nimport type { Engine } from '../../core/engine'\r\nimport type { Counting, GifSearchOptions, Paging } from '../../types'\r\nimport type { CheerioAPI } from 'cheerio'\r\n\r\nexport interface GifSearchResult {\r\n    title: string\r\n    url: string\r\n    mp4: string\r\n    webm: string\r\n}\r\n\r\nexport async function gifSearch(engine: Engine, keyword: string, options: GifSearchOptions): Promise<{\r\n    data: GifSearchResult[]\r\n    paging: Paging\r\n    counting: Counting\r\n}> {\r\n    const url = Route.gifSearch(keyword, options)\r\n    const res = await engine.request.get(url)\r\n    const html = await res.text()\r\n    const $ = getCheerio(html)\r\n\r\n    return {\r\n        data: parseResult($),\r\n        paging: parsePaging($),\r\n        counting: parseCounting($),\r\n    }\r\n}\r\n\r\nfunction parseResult($: CheerioAPI) {\r\n    const list = $('ul.gifLink li.gifVideoBlock')\r\n    const result = list.map((_, el) => {\r\n        const item = $(el)\r\n\r\n        const video = item.find('video')\r\n        const poster = getAttribute<string>(video, 'poster', '')\r\n        const path = getAttribute<string>(item.find('a'), 'href', '')\r\n\r\n        return {\r\n            title: item.find('.title').text(),\r\n            url: urlcat(BASE_URL, path),\r\n            mp4: getDataAttribute<string>(video, 'mp4', ''),\r\n            webm: getDataAttribute<string>(video, 'webm', ''),\r\n            preview: removeProtectionBracket(poster),\r\n        }\r\n    }).get()\r\n\r\n    return result\r\n}\r\n","import { getAutoComplete } from '../../apis/autoComplete'\r\nimport type { Engine } from '../../core/engine'\r\nimport type { AutoCompleteOptions } from '../../types'\r\nimport type { AutoCompleteResultItem } from '../../types/AutoComplete'\r\n\r\nexport async function modelSearch(engine: Engine, keyword: string, options: AutoCompleteOptions = {}): Promise<Array<AutoCompleteResultItem<number>>> {\r\n    const result = await getAutoComplete(engine, keyword, options)\r\n    return result.models\r\n}\r\n","import urlcat from 'urlcat'\r\nimport { Route } from '../../apis'\r\nimport { getAttribute, getCheerio, getDataAttribute } from '../../utils/cheerio'\r\nimport { BASE_URL } from '../../utils/constant'\r\nimport { parseCounting, parsePaging } from './base'\r\nimport type { Engine } from '../../core/engine'\r\nimport type { Counting, Paging, PornstarSearchOptions } from '../../types'\r\nimport type { CheerioAPI } from 'cheerio'\r\n\r\nexport interface PornstarSearchResult {\r\n    name: string\r\n    url: string\r\n    views: string\r\n    videoNum: number\r\n    rank: number\r\n    photo: string\r\n}\r\n\r\nexport async function pornstarSearch(engine: Engine, keyword: string, options: PornstarSearchOptions): Promise<{\r\n    data: PornstarSearchResult[]\r\n    paging: Paging\r\n    counting: Counting\r\n}> {\r\n    const url = Route.pornstarSearch(keyword, options)\r\n    const res = await engine.request.get(url)\r\n    const html = await res.text()\r\n    const $ = getCheerio(html)\r\n\r\n    return {\r\n        data: parseResult($),\r\n        paging: parsePaging($),\r\n        counting: parseCounting($),\r\n    }\r\n}\r\n\r\nfunction parseResult($: CheerioAPI) {\r\n    const $list = $('ul#pornstarsSearchResult li div.wrap')\r\n    const result = $list.map((_, el) => {\r\n        const item = $(el)\r\n        const path = getAttribute<string>(item.find('a'), 'href', '')\r\n        const img = item.find('img')\r\n\r\n        return {\r\n            name: item.find('.title').text(),\r\n            url: urlcat(BASE_URL, path),\r\n            views: item.find('.pstarViews').text().replace('views', '').trim() || '0',\r\n            videoNum: Number.parseInt(item.find('.videosNumber').text()) || 0,\r\n            rank: Number.parseInt(item.find('.rank_number').text()) || 0,\r\n            photo: getDataAttribute<string>(img, 'thumb_url', ''),\r\n        }\r\n    }).get()\r\n\r\n    return result\r\n}\r\n"],"mappings":"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","names":["urlcat","getToken","getToken","createDebug","path","process","fs","import_debug","debug","createDebug","fetch","tags","categories","import_urlcat","path","urlcat","import_urlcat","path","urlcat","name","parseProvider","parseTag","defaultMapper","yesNoMapper","stripeSpaceMapper","numberMapper","DefaultMapper","KeyMapper","parseVideoCount","parseInfo","name","tags","categories","parseResult","import_urlcat","parseResult","path","urlcat","import_urlcat","parseResult","path","urlcat","getToken"]}